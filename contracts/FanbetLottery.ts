/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"FanbetLottery","structs":{"Percents":[{"name":"threeMatch","type":"uint64"},{"name":"fourMatch","type":"uint64"},{"name":"fiveMatch","type":"uint64"},{"name":"managers","type":"uint64"}]},"methods":[{"name":"buy_tickets","desc":"Allows users to buy lottery tickets.","args":[{"name":"pay_txn","type":"pay","desc":"Payment transaction for storage cost."},{"name":"axfer_txn","type":"axfer","desc":"Asset transfer transaction for ticket purchase."},{"name":"guesses","type":"uint8[5][]","desc":"User's ticket guesses."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_tickets","desc":"Allows users to submit their tickets for evaluation.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"payout_winnings","desc":"Allows users to claim their winnings.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"submit_commit","desc":"Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reveal_ticket","desc":"Reveals the winning ticket based on the commitment.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"open_payout","desc":"Opens the payout phase of the lottery.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"payout_manager","desc":"Payouts the managers based on their allocation percentage.","args":[{"name":"index","type":"uint64","desc":"The index of the manager to payout."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_lottery","desc":"Resets the lottery for the next round.","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrap","desc":"Bootstraps the lottery contract with initial settings.","args":[{"name":"price","type":"uint64","desc":"Ticket price."},{"name":"asset_id","type":"uint64","desc":"Asset ID for the ticket token."},{"name":"decimals","type":"uint64","desc":"Decimal precision for the ticket price."},{"name":"beacon_id","type":"uint64","desc":"Application ID for the random beacon."},{"name":"discount_id","type":"uint64","desc":"Application ID for the discount app."},{"name":"reveal_duration","type":"uint64","desc":"Duration for the reveal phase."},{"name":"submissions_duration","type":"uint64","desc":"Duration for the submission phase."},{"name":"payout_duration","type":"uint64","desc":"Duration for the payout phase."},{"name":"allocation_percents","type":"(uint64,uint64,uint64,uint64)","struct":"Percents"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_admin_account","desc":"Updates the administrator account.","args":[{"name":"new_admin","type":"address","desc":"The new administrator address."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_executor_account","desc":"Updates the executor account.","args":[{"name":"new_executor","type":"address","desc":"The new executor address."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_manager_account","desc":"Updates a manager account.","args":[{"name":"index","type":"uint8","desc":"The index of the manager to update."},{"name":"new_manager","type":"address","desc":"The new manager address."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_beacon_app","desc":"Updates the random beacon application ID.","args":[{"name":"new_beacon_id","type":"uint64","desc":"The new beacon application ID."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_discount_app","desc":"Updates the discount application ID.","args":[{"name":"new_discount_id","type":"uint64","desc":"The new discount application ID."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_reveal_duration","desc":"Updates the reveal phase duration.","args":[{"name":"new_delay","type":"uint64","desc":"The new reveal duration."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_submission_duration","desc":"Updates the submission phase duration.","args":[{"name":"new_delay","type":"uint64","desc":"The new submission duration."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_payout_duration","desc":"Updates the payout phase duration.","args":[{"name":"new_delay","type":"uint64","desc":"The new payout duration."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_ticket_price","desc":"Updates the ticket price.","args":[{"name":"new_price","type":"uint64","desc":"The new ticket price."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_ticket_token","desc":"Updates the ticket token and its decimal precision.","args":[{"name":"new_token_id","type":"uint64","desc":"The new ticket token ID."},{"name":"new_decimal","type":"uint64","desc":"The new decimal precision."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_percents","desc":"Updates the percentage distribution for prize allocation.","args":[{"name":"new_percents","type":"(uint64,uint64,uint64,uint64)","desc":"The new percentage distribution.","struct":"Percents"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_storage_cost","desc":"Calculates the storage cost for a given number of tickets.","args":[{"name":"num_of_tickets","type":"uint64","desc":"The number of tickets."}],"returns":{"type":"uint64","desc":"An array containing the ticket cost and player cost."},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_winning_ticket","args":[],"returns":{"type":"uint8[5]"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":13,"bytes":8},"local":{"ints":0,"bytes":0}},"keys":{"global":{"administrator":{"key":"YWRtaW5pc3RyYXRvcg==","keyType":"AVMString","valueType":"AVMBytes"},"beacon_app":{"key":"YmVhY29uX2FwcA==","keyType":"AVMString","valueType":"AVMUint64"},"bootstrapped":{"key":"Ym9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64"},"commitment":{"key":"Y29tbWl0bWVudA==","keyType":"AVMString","valueType":"AVMBytes"},"committed":{"key":"Y29tbWl0dGVk","keyType":"AVMString","valueType":"AVMUint64"},"decimals":{"key":"ZGVjaW1hbHM=","keyType":"AVMString","valueType":"AVMUint64"},"discount_app":{"key":"ZGlzY291bnRfYXBw","keyType":"AVMString","valueType":"AVMUint64"},"executor":{"key":"ZXhlY3V0b3I=","keyType":"AVMString","valueType":"AVMBytes"},"game_round":{"key":"Z2FtZV9yb3VuZA==","keyType":"AVMString","valueType":"AVMUint64"},"game_status":{"key":"Z2FtZV9zdGF0dXM=","keyType":"AVMString","valueType":"AVMBytes"},"managers":{"key":"bWFuYWdlcnM=","keyType":"AVMString","valueType":"AVMBytes"},"payout_duration":{"key":"cGF5b3V0X2R1cmF0aW9u","keyType":"AVMString","valueType":"AVMUint64"},"percents":{"key":"cGVyY2VudHM=","keyType":"AVMString","valueType":"AVMBytes"},"prize_pool":{"key":"cHJpemVfcG9vbA==","keyType":"AVMString","valueType":"AVMUint64"},"reveal":{"key":"cmV2ZWFs","keyType":"AVMString","valueType":"AVMBytes"},"reveal_duration":{"key":"cmV2ZWFsX2R1cmF0aW9u","keyType":"AVMString","valueType":"AVMUint64"},"revealed":{"key":"cmV2ZWFsZWQ=","keyType":"AVMString","valueType":"AVMUint64"},"submission_duration":{"key":"c3VibWlzc2lvbl9kdXJhdGlvbg==","keyType":"AVMString","valueType":"AVMUint64"},"ticket_price":{"key":"dGlja2V0X3ByaWNl","keyType":"AVMString","valueType":"AVMUint64"},"ticket_token":{"key":"dGlja2V0X3Rva2Vu","keyType":"AVMString","valueType":"AVMUint64"},"winners":{"key":"d2lubmVycw==","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Percents = {
  threeMatch: bigint,
  fourMatch: bigint,
  fiveMatch: bigint,
  managers: bigint
}


/**
 * Converts the ABI tuple representation of a Percents to the struct representation
 */
export function PercentsFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Percents, APP_SPEC.structs) as Percents
}

/**
 * The argument types for the FanbetLottery contract
 */
export type FanbetLotteryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'buy_tickets(pay,axfer,uint8[5][])void': {
      /**
       * Payment transaction for storage cost.
       */
      payTxn: AppMethodCallTransactionArgument
      /**
       * Asset transfer transaction for ticket purchase.
       */
      axferTxn: AppMethodCallTransactionArgument
      /**
       * User's ticket guesses.
       */
      guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][]
    }
    'submit_tickets()void': Record<string, never>
    'payout_winnings()void': Record<string, never>
    'submit_commit()void': Record<string, never>
    'reveal_ticket()void': Record<string, never>
    'open_payout()void': Record<string, never>
    'payout_manager(uint64)void': {
      /**
       * The index of the manager to payout.
       */
      index: bigint | number
    }
    'reset_lottery()void': Record<string, never>
    'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void': {
      /**
       * Ticket price.
       */
      price: bigint | number
      /**
       * Asset ID for the ticket token.
       */
      assetId: bigint | number
      /**
       * Decimal precision for the ticket price.
       */
      decimals: bigint | number
      /**
       * Application ID for the random beacon.
       */
      beaconId: bigint | number
      /**
       * Application ID for the discount app.
       */
      discountId: bigint | number
      /**
       * Duration for the reveal phase.
       */
      revealDuration: bigint | number
      /**
       * Duration for the submission phase.
       */
      submissionsDuration: bigint | number
      /**
       * Duration for the payout phase.
       */
      payoutDuration: bigint | number
      allocationPercents: Percents
    }
    'update_admin_account(address)void': {
      /**
       * The new administrator address.
       */
      newAdmin: string
    }
    'update_executor_account(address)void': {
      /**
       * The new executor address.
       */
      newExecutor: string
    }
    'update_manager_account(uint8,address)void': {
      /**
       * The index of the manager to update.
       */
      index: bigint | number
      /**
       * The new manager address.
       */
      newManager: string
    }
    'update_beacon_app(uint64)void': {
      /**
       * The new beacon application ID.
       */
      newBeaconId: bigint | number
    }
    'update_discount_app(uint64)void': {
      /**
       * The new discount application ID.
       */
      newDiscountId: bigint | number
    }
    'update_reveal_duration(uint64)void': {
      /**
       * The new reveal duration.
       */
      newDelay: bigint | number
    }
    'update_submission_duration(uint64)void': {
      /**
       * The new submission duration.
       */
      newDelay: bigint | number
    }
    'update_payout_duration(uint64)void': {
      /**
       * The new payout duration.
       */
      newDelay: bigint | number
    }
    'update_ticket_price(uint64)void': {
      /**
       * The new ticket price.
       */
      newPrice: bigint | number
    }
    'update_ticket_token(uint64,uint64)void': {
      /**
       * The new ticket token ID.
       */
      newTokenId: bigint | number
      /**
       * The new decimal precision.
       */
      newDecimal: bigint | number
    }
    'update_percents((uint64,uint64,uint64,uint64))void': {
      /**
       * The new percentage distribution.
       */
      newPercents: Percents
    }
    'get_storage_cost(uint64)uint64': {
      /**
       * The number of tickets.
       */
      numOfTickets: bigint | number
    }
    'get_winning_ticket()uint8[5]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'buy_tickets(pay,axfer,uint8[5][])void': [payTxn: AppMethodCallTransactionArgument, axferTxn: AppMethodCallTransactionArgument, guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][]]
    'submit_tickets()void': []
    'payout_winnings()void': []
    'submit_commit()void': []
    'reveal_ticket()void': []
    'open_payout()void': []
    'payout_manager(uint64)void': [index: bigint | number]
    'reset_lottery()void': []
    'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void': [price: bigint | number, assetId: bigint | number, decimals: bigint | number, beaconId: bigint | number, discountId: bigint | number, revealDuration: bigint | number, submissionsDuration: bigint | number, payoutDuration: bigint | number, allocationPercents: Percents]
    'update_admin_account(address)void': [newAdmin: string]
    'update_executor_account(address)void': [newExecutor: string]
    'update_manager_account(uint8,address)void': [index: bigint | number, newManager: string]
    'update_beacon_app(uint64)void': [newBeaconId: bigint | number]
    'update_discount_app(uint64)void': [newDiscountId: bigint | number]
    'update_reveal_duration(uint64)void': [newDelay: bigint | number]
    'update_submission_duration(uint64)void': [newDelay: bigint | number]
    'update_payout_duration(uint64)void': [newDelay: bigint | number]
    'update_ticket_price(uint64)void': [newPrice: bigint | number]
    'update_ticket_token(uint64,uint64)void': [newTokenId: bigint | number, newDecimal: bigint | number]
    'update_percents((uint64,uint64,uint64,uint64))void': [newPercents: Percents]
    'get_storage_cost(uint64)uint64': [numOfTickets: bigint | number]
    'get_winning_ticket()uint8[5]': []
  }
}

/**
 * The return type for each method
 */
export type FanbetLotteryReturns = {
  'buy_tickets(pay,axfer,uint8[5][])void': void
  'submit_tickets()void': void
  'payout_winnings()void': void
  'submit_commit()void': void
  'reveal_ticket()void': void
  'open_payout()void': void
  'payout_manager(uint64)void': void
  'reset_lottery()void': void
  'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void': void
  'update_admin_account(address)void': void
  'update_executor_account(address)void': void
  'update_manager_account(uint8,address)void': void
  'update_beacon_app(uint64)void': void
  'update_discount_app(uint64)void': void
  'update_reveal_duration(uint64)void': void
  'update_submission_duration(uint64)void': void
  'update_payout_duration(uint64)void': void
  'update_ticket_price(uint64)void': void
  'update_ticket_token(uint64,uint64)void': void
  'update_percents((uint64,uint64,uint64,uint64))void': void
  'get_storage_cost(uint64)uint64': bigint
  'get_winning_ticket()uint8[5]': [number, number, number, number, number]
}

/**
 * Defines the types of available calls and state of the FanbetLottery smart contract.
 */
export type FanbetLotteryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'buy_tickets(pay,axfer,uint8[5][])void' | 'buy_tickets', {
      argsObj: FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void']
      argsTuple: FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']
      returns: FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void']
    }>
    & Record<'submit_tickets()void' | 'submit_tickets', {
      argsObj: FanbetLotteryArgs['obj']['submit_tickets()void']
      argsTuple: FanbetLotteryArgs['tuple']['submit_tickets()void']
      returns: FanbetLotteryReturns['submit_tickets()void']
    }>
    & Record<'payout_winnings()void' | 'payout_winnings', {
      argsObj: FanbetLotteryArgs['obj']['payout_winnings()void']
      argsTuple: FanbetLotteryArgs['tuple']['payout_winnings()void']
      returns: FanbetLotteryReturns['payout_winnings()void']
    }>
    & Record<'submit_commit()void' | 'submit_commit', {
      argsObj: FanbetLotteryArgs['obj']['submit_commit()void']
      argsTuple: FanbetLotteryArgs['tuple']['submit_commit()void']
      returns: FanbetLotteryReturns['submit_commit()void']
    }>
    & Record<'reveal_ticket()void' | 'reveal_ticket', {
      argsObj: FanbetLotteryArgs['obj']['reveal_ticket()void']
      argsTuple: FanbetLotteryArgs['tuple']['reveal_ticket()void']
      returns: FanbetLotteryReturns['reveal_ticket()void']
    }>
    & Record<'open_payout()void' | 'open_payout', {
      argsObj: FanbetLotteryArgs['obj']['open_payout()void']
      argsTuple: FanbetLotteryArgs['tuple']['open_payout()void']
      returns: FanbetLotteryReturns['open_payout()void']
    }>
    & Record<'payout_manager(uint64)void' | 'payout_manager', {
      argsObj: FanbetLotteryArgs['obj']['payout_manager(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['payout_manager(uint64)void']
      returns: FanbetLotteryReturns['payout_manager(uint64)void']
    }>
    & Record<'reset_lottery()void' | 'reset_lottery', {
      argsObj: FanbetLotteryArgs['obj']['reset_lottery()void']
      argsTuple: FanbetLotteryArgs['tuple']['reset_lottery()void']
      returns: FanbetLotteryReturns['reset_lottery()void']
    }>
    & Record<'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void' | 'bootstrap', {
      argsObj: FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']
      argsTuple: FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']
      returns: FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']
    }>
    & Record<'update_admin_account(address)void' | 'update_admin_account', {
      argsObj: FanbetLotteryArgs['obj']['update_admin_account(address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_admin_account(address)void']
      returns: FanbetLotteryReturns['update_admin_account(address)void']
    }>
    & Record<'update_executor_account(address)void' | 'update_executor_account', {
      argsObj: FanbetLotteryArgs['obj']['update_executor_account(address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_executor_account(address)void']
      returns: FanbetLotteryReturns['update_executor_account(address)void']
    }>
    & Record<'update_manager_account(uint8,address)void' | 'update_manager_account', {
      argsObj: FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']
      returns: FanbetLotteryReturns['update_manager_account(uint8,address)void']
    }>
    & Record<'update_beacon_app(uint64)void' | 'update_beacon_app', {
      argsObj: FanbetLotteryArgs['obj']['update_beacon_app(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']
      returns: FanbetLotteryReturns['update_beacon_app(uint64)void']
    }>
    & Record<'update_discount_app(uint64)void' | 'update_discount_app', {
      argsObj: FanbetLotteryArgs['obj']['update_discount_app(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']
      returns: FanbetLotteryReturns['update_discount_app(uint64)void']
    }>
    & Record<'update_reveal_duration(uint64)void' | 'update_reveal_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']
      returns: FanbetLotteryReturns['update_reveal_duration(uint64)void']
    }>
    & Record<'update_submission_duration(uint64)void' | 'update_submission_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_submission_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']
      returns: FanbetLotteryReturns['update_submission_duration(uint64)void']
    }>
    & Record<'update_payout_duration(uint64)void' | 'update_payout_duration', {
      argsObj: FanbetLotteryArgs['obj']['update_payout_duration(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']
      returns: FanbetLotteryReturns['update_payout_duration(uint64)void']
    }>
    & Record<'update_ticket_price(uint64)void' | 'update_ticket_price', {
      argsObj: FanbetLotteryArgs['obj']['update_ticket_price(uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']
      returns: FanbetLotteryReturns['update_ticket_price(uint64)void']
    }>
    & Record<'update_ticket_token(uint64,uint64)void' | 'update_ticket_token', {
      argsObj: FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void']
      argsTuple: FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']
      returns: FanbetLotteryReturns['update_ticket_token(uint64,uint64)void']
    }>
    & Record<'update_percents((uint64,uint64,uint64,uint64))void' | 'update_percents', {
      argsObj: FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void']
      argsTuple: FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']
      returns: FanbetLotteryReturns['update_percents((uint64,uint64,uint64,uint64))void']
    }>
    & Record<'get_storage_cost(uint64)uint64' | 'get_storage_cost', {
      argsObj: FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64']
      argsTuple: FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']
      /**
       * An array containing the ticket cost and player cost.
       */
      returns: FanbetLotteryReturns['get_storage_cost(uint64)uint64']
    }>
    & Record<'get_winning_ticket()uint8[5]' | 'get_winning_ticket', {
      argsObj: FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]']
      argsTuple: FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']
      returns: FanbetLotteryReturns['get_winning_ticket()uint8[5]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        administrator: BinaryState
        beaconApp: bigint
        bootstrapped: bigint
        commitment: BinaryState
        committed: bigint
        decimals: bigint
        discountApp: bigint
        executor: BinaryState
        gameRound: bigint
        gameStatus: BinaryState
        managers: BinaryState
        payoutDuration: bigint
        percents: BinaryState
        prizePool: bigint
        reveal: BinaryState
        revealDuration: bigint
        revealed: bigint
        submissionDuration: bigint
        ticketPrice: bigint
        ticketToken: bigint
        winners: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FanbetLotterySignatures = keyof FanbetLotteryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FanbetLotteryNonVoidMethodSignatures = keyof FanbetLotteryTypes['methods'] extends infer T ? T extends keyof FanbetLotteryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FanbetLottery smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FanbetLotterySignatures> = FanbetLotteryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FanbetLottery smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FanbetLotterySignatures> = FanbetLotteryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FanbetLotteryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FanbetLotteryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FanbetLotteryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FanbetLotteryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FanbetLottery smart contract
 */
export abstract class FanbetLotteryParamsFactory {
  /**
   * Constructs a no op call for the buy_tickets(pay,axfer,uint8[5][])void ABI method
   *
   * Allows users to buy lottery tickets.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyTickets(params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_tickets(pay,axfer,uint8[5][])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn, params.args.axferTxn, params.args.guesses],
    }
  }
  /**
   * Constructs a no op call for the submit_tickets()void ABI method
   *
   * Allows users to submit their tickets for evaluation.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitTickets(params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_tickets()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payout_winnings()void ABI method
   *
   * Allows users to claim their winnings.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutWinnings(params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payout_winnings()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the submit_commit()void ABI method
   *
   * Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static submitCommit(params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'submit_commit()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reveal_ticket()void ABI method
   *
   * Reveals the winning ticket based on the commitment.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static revealTicket(params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reveal_ticket()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the open_payout()void ABI method
   *
   * Opens the payout phase of the lottery.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static openPayout(params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'open_payout()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the payout_manager(uint64)void ABI method
   *
   * Payouts the managers based on their allocation percentage.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payoutManager(params: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payout_manager(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index],
    }
  }
  /**
   * Constructs a no op call for the reset_lottery()void ABI method
   *
   * Resets the lottery for the next round.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetLottery(params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_lottery()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void ABI method
   *
   * Bootstraps the lottery contract with initial settings.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.price, params.args.assetId, params.args.decimals, params.args.beaconId, params.args.discountId, params.args.revealDuration, params.args.submissionsDuration, params.args.payoutDuration, params.args.allocationPercents],
    }
  }
  /**
   * Constructs a no op call for the update_admin_account(address)void ABI method
   *
   * Updates the administrator account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdminAccount(params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_admin_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the update_executor_account(address)void ABI method
   *
   * Updates the executor account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateExecutorAccount(params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_executor_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newExecutor],
    }
  }
  /**
   * Constructs a no op call for the update_manager_account(uint8,address)void ABI method
   *
   * Updates a manager account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateManagerAccount(params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_manager_account(uint8,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.index, params.args.newManager],
    }
  }
  /**
   * Constructs a no op call for the update_beacon_app(uint64)void ABI method
   *
   * Updates the random beacon application ID.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateBeaconApp(params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_beacon_app(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newBeaconId],
    }
  }
  /**
   * Constructs a no op call for the update_discount_app(uint64)void ABI method
   *
   * Updates the discount application ID.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateDiscountApp(params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_discount_app(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscountId],
    }
  }
  /**
   * Constructs a no op call for the update_reveal_duration(uint64)void ABI method
   *
   * Updates the reveal phase duration.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRevealDuration(params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_reveal_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_submission_duration(uint64)void ABI method
   *
   * Updates the submission phase duration.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateSubmissionDuration(params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_submission_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_payout_duration(uint64)void ABI method
   *
   * Updates the payout phase duration.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePayoutDuration(params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_payout_duration(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDelay],
    }
  }
  /**
   * Constructs a no op call for the update_ticket_price(uint64)void ABI method
   *
   * Updates the ticket price.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTicketPrice(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_ticket_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPrice],
    }
  }
  /**
   * Constructs a no op call for the update_ticket_token(uint64,uint64)void ABI method
   *
   * Updates the ticket token and its decimal precision.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateTicketToken(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_ticket_token(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newTokenId, params.args.newDecimal],
    }
  }
  /**
   * Constructs a no op call for the update_percents((uint64,uint64,uint64,uint64))void ABI method
   *
   * Updates the percentage distribution for prize allocation.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePercents(params: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_percents((uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newPercents],
    }
  }
  /**
   * Constructs a no op call for the get_storage_cost(uint64)uint64 ABI method
   *
   * Calculates the storage cost for a given number of tickets.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_storage_cost(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.numOfTickets],
    }
  }
  /**
   * Constructs a no op call for the get_winning_ticket()uint8[5] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_winning_ticket()uint8[5]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FanbetLottery smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FanbetLotteryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FanbetLotteryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FanbetLotteryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FanbetLotteryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FanbetLottery smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FanbetLotteryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FanbetLotteryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetLottery smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FanbetLotteryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FanbetLottery smart contract
 */
export class FanbetLotteryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FanbetLotteryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FanbetLottery app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FanbetLotteryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FanbetLotteryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FanbetLotteryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FanbetLotteryClient> {
    return new FanbetLotteryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FanbetLotteryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FanbetLotteryClient> {
    return new FanbetLotteryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * Allows users to buy lottery tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyTickets: (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.buyTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * Allows users to submit their tickets for evaluation.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitTickets: (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.submitTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * Allows users to claim their winnings.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutWinnings: (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.payoutWinnings(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    submitCommit: (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.submitCommit(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * Reveals the winning ticket based on the commitment.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    revealTicket: (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.revealTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * Opens the payout phase of the lottery.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    openPayout: (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.openPayout(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_manager(uint64)void` ABI method.
     *
     * Payouts the managers based on their allocation percentage.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payoutManager: (params: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.payoutManager(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * Resets the lottery for the next round.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetLottery: (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.resetLottery(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Bootstraps the lottery contract with initial settings.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * Updates the administrator account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdminAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateExecutorAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * Updates a manager account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateManagerAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * Updates the random beacon application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateBeaconApp: (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * Updates the discount application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateDiscountApp: (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * Updates the reveal phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRevealDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * Updates the submission phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateSubmissionDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * Updates the payout phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePayoutDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * Updates the ticket price.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTicketPrice: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * Updates the ticket token and its decimal precision.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateTicketToken: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updateTicketToken(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_percents((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Updates the percentage distribution for prize allocation.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePercents: (params: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.updatePercents(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the storage cost for a given number of tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call params: An array containing the ticket cost and player cost.
     */
    getStorageCost: (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.getStorageCost(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getWinningTicket: (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * Allows users to buy lottery tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyTickets: (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.buyTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * Allows users to submit their tickets for evaluation.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitTickets: (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.submitTickets(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * Allows users to claim their winnings.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutWinnings: (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.payoutWinnings(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    submitCommit: (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.submitCommit(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * Reveals the winning ticket based on the commitment.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    revealTicket: (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.revealTicket(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * Opens the payout phase of the lottery.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    openPayout: (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.openPayout(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_manager(uint64)void` ABI method.
     *
     * Payouts the managers based on their allocation percentage.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payoutManager: (params: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.payoutManager(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * Resets the lottery for the next round.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetLottery: (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.resetLottery(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Bootstraps the lottery contract with initial settings.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * Updates the administrator account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdminAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateExecutorAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * Updates a manager account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateManagerAccount: (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * Updates the random beacon application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateBeaconApp: (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * Updates the discount application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateDiscountApp: (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * Updates the reveal phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRevealDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * Updates the submission phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateSubmissionDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * Updates the payout phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePayoutDuration: (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * Updates the ticket price.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTicketPrice: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * Updates the ticket token and its decimal precision.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateTicketToken: (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updateTicketToken(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_percents((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Updates the percentage distribution for prize allocation.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePercents: (params: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.updatePercents(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the storage cost for a given number of tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: An array containing the ticket cost and player cost.
     */
    getStorageCost: (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.getStorageCost(params))
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getWinningTicket: (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `buy_tickets(pay,axfer,uint8[5][])void` ABI method.
     *
     * Allows users to buy lottery tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyTickets: async (params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.buyTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_tickets()void` ABI method.
     *
     * Allows users to submit their tickets for evaluation.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitTickets: async (params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.submitTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['submit_tickets()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_winnings()void` ABI method.
     *
     * Allows users to claim their winnings.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutWinnings: async (params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.payoutWinnings(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['payout_winnings()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `submit_commit()void` ABI method.
     *
     * Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    submitCommit: async (params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.submitCommit(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['submit_commit()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reveal_ticket()void` ABI method.
     *
     * Reveals the winning ticket based on the commitment.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    revealTicket: async (params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.revealTicket(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['reveal_ticket()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `open_payout()void` ABI method.
     *
     * Opens the payout phase of the lottery.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    openPayout: async (params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.openPayout(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['open_payout()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `payout_manager(uint64)void` ABI method.
     *
     * Payouts the managers based on their allocation percentage.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payoutManager: async (params: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.payoutManager(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['payout_manager(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `reset_lottery()void` ABI method.
     *
     * Resets the lottery for the next round.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetLottery: async (params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.resetLottery(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['reset_lottery()void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Bootstraps the lottery contract with initial settings.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_admin_account(address)void` ABI method.
     *
     * Updates the administrator account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdminAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateAdminAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_admin_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateExecutorAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateExecutorAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_executor_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_manager_account(uint8,address)void` ABI method.
     *
     * Updates a manager account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateManagerAccount: async (params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateManagerAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_manager_account(uint8,address)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_beacon_app(uint64)void` ABI method.
     *
     * Updates the random beacon application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateBeaconApp: async (params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateBeaconApp(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_beacon_app(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_discount_app(uint64)void` ABI method.
     *
     * Updates the discount application ID.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateDiscountApp: async (params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateDiscountApp(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_discount_app(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_reveal_duration(uint64)void` ABI method.
     *
     * Updates the reveal phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRevealDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateRevealDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_reveal_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_submission_duration(uint64)void` ABI method.
     *
     * Updates the submission phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateSubmissionDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateSubmissionDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_submission_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_payout_duration(uint64)void` ABI method.
     *
     * Updates the payout phase duration.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePayoutDuration: async (params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updatePayoutDuration(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_payout_duration(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_price(uint64)void` ABI method.
     *
     * Updates the ticket price.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTicketPrice: async (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateTicketPrice(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_ticket_price(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_ticket_token(uint64,uint64)void` ABI method.
     *
     * Updates the ticket token and its decimal precision.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateTicketToken: async (params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updateTicketToken(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_ticket_token(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `update_percents((uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Updates the percentage distribution for prize allocation.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePercents: async (params: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.updatePercents(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['update_percents((uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculates the storage cost for a given number of tickets.
     *
     * @param params The params for the smart contract call
     * @returns The call result: An array containing the ticket cost and player cost.
     */
    getStorageCost: async (params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getStorageCost(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['get_storage_cost(uint64)uint64'])}
    },

    /**
     * Makes a call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getWinningTicket: async (params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getWinningTicket(params))
      return {...result, return: result.return as unknown as (undefined | FanbetLotteryReturns['get_winning_ticket()uint8[5]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FanbetLotteryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FanbetLottery smart contract using the `get_storage_cost(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculates the storage cost for a given number of tickets.
   *
   * @param params The params for the smart contract call
   * @returns The call result: An array containing the ticket cost and player cost.
   */
  async getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']>) {
    const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getStorageCost(params))
    return result.return as unknown as FanbetLotteryReturns['get_storage_cost(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the FanbetLottery smart contract using the `get_winning_ticket()uint8[5]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> = {args: []}) {
    const result = await this.appClient.send.call(FanbetLotteryParamsFactory.getWinningTicket(params))
    return result.return as unknown as FanbetLotteryReturns['get_winning_ticket()uint8[5]']
  }

  /**
   * Methods to access state for the current FanbetLottery app
   */
  state = {
    /**
     * Methods to access global state for the current FanbetLottery app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          administrator: new BinaryStateValue(result.administrator),
          beaconApp: result.beacon_app,
          bootstrapped: result.bootstrapped,
          commitment: new BinaryStateValue(result.commitment),
          committed: result.committed,
          decimals: result.decimals,
          discountApp: result.discount_app,
          executor: new BinaryStateValue(result.executor),
          gameRound: result.game_round,
          gameStatus: new BinaryStateValue(result.game_status),
          managers: new BinaryStateValue(result.managers),
          payoutDuration: result.payout_duration,
          percents: new BinaryStateValue(result.percents),
          prizePool: result.prize_pool,
          reveal: new BinaryStateValue(result.reveal),
          revealDuration: result.reveal_duration,
          revealed: result.revealed,
          submissionDuration: result.submission_duration,
          ticketPrice: result.ticket_price,
          ticketToken: result.ticket_token,
          winners: new BinaryStateValue(result.winners),
        }
      },
      /**
       * Get the current value of the administrator key in global state
       */
      administrator: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("administrator")) as Uint8Array | undefined) },
      /**
       * Get the current value of the beacon_app key in global state
       */
      beaconApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("beacon_app")) as bigint | undefined },
      /**
       * Get the current value of the bootstrapped key in global state
       */
      bootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the commitment key in global state
       */
      commitment: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("commitment")) as Uint8Array | undefined) },
      /**
       * Get the current value of the committed key in global state
       */
      committed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("committed")) as bigint | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as bigint | undefined },
      /**
       * Get the current value of the discount_app key in global state
       */
      discountApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("discount_app")) as bigint | undefined },
      /**
       * Get the current value of the executor key in global state
       */
      executor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("executor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the game_round key in global state
       */
      gameRound: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("game_round")) as bigint | undefined },
      /**
       * Get the current value of the game_status key in global state
       */
      gameStatus: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("game_status")) as Uint8Array | undefined) },
      /**
       * Get the current value of the managers key in global state
       */
      managers: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("managers")) as Uint8Array | undefined) },
      /**
       * Get the current value of the payout_duration key in global state
       */
      payoutDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("payout_duration")) as bigint | undefined },
      /**
       * Get the current value of the percents key in global state
       */
      percents: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("percents")) as Uint8Array | undefined) },
      /**
       * Get the current value of the prize_pool key in global state
       */
      prizePool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("prize_pool")) as bigint | undefined },
      /**
       * Get the current value of the reveal key in global state
       */
      reveal: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("reveal")) as Uint8Array | undefined) },
      /**
       * Get the current value of the reveal_duration key in global state
       */
      revealDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reveal_duration")) as bigint | undefined },
      /**
       * Get the current value of the revealed key in global state
       */
      revealed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("revealed")) as bigint | undefined },
      /**
       * Get the current value of the submission_duration key in global state
       */
      submissionDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("submission_duration")) as bigint | undefined },
      /**
       * Get the current value of the ticket_price key in global state
       */
      ticketPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_price")) as bigint | undefined },
      /**
       * Get the current value of the ticket_token key in global state
       */
      ticketToken: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ticket_token")) as bigint | undefined },
      /**
       * Get the current value of the winners key in global state
       */
      winners: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("winners")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FanbetLotteryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a buy_tickets(pay,axfer,uint8[5][])void method call against the FanbetLottery contract
       */
      buyTickets(params: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_tickets()void method call against the FanbetLottery contract
       */
      submitTickets(params: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payout_winnings()void method call against the FanbetLottery contract
       */
      payoutWinnings(params: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutWinnings(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a submit_commit()void method call against the FanbetLottery contract
       */
      submitCommit(params: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.submitCommit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reveal_ticket()void method call against the FanbetLottery contract
       */
      revealTicket(params: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.revealTicket(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a open_payout()void method call against the FanbetLottery contract
       */
      openPayout(params: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.openPayout(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a payout_manager(uint64)void method call against the FanbetLottery contract
       */
      payoutManager(params: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payoutManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reset_lottery()void method call against the FanbetLottery contract
       */
      resetLottery(params: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetLottery(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void method call against the FanbetLottery contract
       */
      bootstrap(params: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_admin_account(address)void method call against the FanbetLottery contract
       */
      updateAdminAccount(params: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdminAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_executor_account(address)void method call against the FanbetLottery contract
       */
      updateExecutorAccount(params: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateExecutorAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_manager_account(uint8,address)void method call against the FanbetLottery contract
       */
      updateManagerAccount(params: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateManagerAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_beacon_app(uint64)void method call against the FanbetLottery contract
       */
      updateBeaconApp(params: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateBeaconApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_discount_app(uint64)void method call against the FanbetLottery contract
       */
      updateDiscountApp(params: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateDiscountApp(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_reveal_duration(uint64)void method call against the FanbetLottery contract
       */
      updateRevealDuration(params: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRevealDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_submission_duration(uint64)void method call against the FanbetLottery contract
       */
      updateSubmissionDuration(params: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateSubmissionDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_payout_duration(uint64)void method call against the FanbetLottery contract
       */
      updatePayoutDuration(params: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePayoutDuration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_ticket_price(uint64)void method call against the FanbetLottery contract
       */
      updateTicketPrice(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTicketPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_ticket_token(uint64,uint64)void method call against the FanbetLottery contract
       */
      updateTicketToken(params: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateTicketToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_percents((uint64,uint64,uint64,uint64))void method call against the FanbetLottery contract
       */
      updatePercents(params: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePercents(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_storage_cost(uint64)uint64 method call against the FanbetLottery contract
       */
      getStorageCost(params: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStorageCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_storage_cost(uint64)uint64', v))
        return this
      },
      /**
       * Add a get_winning_ticket()uint8[5] method call against the FanbetLottery contract
       */
      getWinningTicket(params: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getWinningTicket(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_winning_ticket()uint8[5]', v))
        return this
      },
      /**
       * Add a clear state call to the FanbetLottery contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FanbetLotteryComposer
  }
}
export type FanbetLotteryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the buy_tickets(pay,axfer,uint8[5][])void ABI method.
   *
   * Allows users to buy lottery tickets.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyTickets(params?: CallParams<FanbetLotteryArgs['obj']['buy_tickets(pay,axfer,uint8[5][])void'] | FanbetLotteryArgs['tuple']['buy_tickets(pay,axfer,uint8[5][])void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['buy_tickets(pay,axfer,uint8[5][])void'] | undefined]>

  /**
   * Calls the submit_tickets()void ABI method.
   *
   * Allows users to submit their tickets for evaluation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitTickets(params?: CallParams<FanbetLotteryArgs['obj']['submit_tickets()void'] | FanbetLotteryArgs['tuple']['submit_tickets()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['submit_tickets()void'] | undefined]>

  /**
   * Calls the payout_winnings()void ABI method.
   *
   * Allows users to claim their winnings.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutWinnings(params?: CallParams<FanbetLotteryArgs['obj']['payout_winnings()void'] | FanbetLotteryArgs['tuple']['payout_winnings()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['payout_winnings()void'] | undefined]>

  /**
   * Calls the submit_commit()void ABI method.
   *
   * Submits a commitment to the Algorand Randomness Beacon to get enthropy needed for generating the winning ticket.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitCommit(params?: CallParams<FanbetLotteryArgs['obj']['submit_commit()void'] | FanbetLotteryArgs['tuple']['submit_commit()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['submit_commit()void'] | undefined]>

  /**
   * Calls the reveal_ticket()void ABI method.
   *
   * Reveals the winning ticket based on the commitment.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revealTicket(params?: CallParams<FanbetLotteryArgs['obj']['reveal_ticket()void'] | FanbetLotteryArgs['tuple']['reveal_ticket()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['reveal_ticket()void'] | undefined]>

  /**
   * Calls the open_payout()void ABI method.
   *
   * Opens the payout phase of the lottery.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  openPayout(params?: CallParams<FanbetLotteryArgs['obj']['open_payout()void'] | FanbetLotteryArgs['tuple']['open_payout()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['open_payout()void'] | undefined]>

  /**
   * Calls the payout_manager(uint64)void ABI method.
   *
   * Payouts the managers based on their allocation percentage.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payoutManager(params?: CallParams<FanbetLotteryArgs['obj']['payout_manager(uint64)void'] | FanbetLotteryArgs['tuple']['payout_manager(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['payout_manager(uint64)void'] | undefined]>

  /**
   * Calls the reset_lottery()void ABI method.
   *
   * Resets the lottery for the next round.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetLottery(params?: CallParams<FanbetLotteryArgs['obj']['reset_lottery()void'] | FanbetLotteryArgs['tuple']['reset_lottery()void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['reset_lottery()void'] | undefined]>

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void ABI method.
   *
   * Bootstraps the lottery contract with initial settings.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<FanbetLotteryArgs['obj']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the update_admin_account(address)void ABI method.
   *
   * Updates the administrator account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_admin_account(address)void'] | FanbetLotteryArgs['tuple']['update_admin_account(address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_admin_account(address)void'] | undefined]>

  /**
   * Calls the update_executor_account(address)void ABI method.
   *
   * Updates the executor account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateExecutorAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_executor_account(address)void'] | FanbetLotteryArgs['tuple']['update_executor_account(address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_executor_account(address)void'] | undefined]>

  /**
   * Calls the update_manager_account(uint8,address)void ABI method.
   *
   * Updates a manager account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateManagerAccount(params?: CallParams<FanbetLotteryArgs['obj']['update_manager_account(uint8,address)void'] | FanbetLotteryArgs['tuple']['update_manager_account(uint8,address)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_manager_account(uint8,address)void'] | undefined]>

  /**
   * Calls the update_beacon_app(uint64)void ABI method.
   *
   * Updates the random beacon application ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateBeaconApp(params?: CallParams<FanbetLotteryArgs['obj']['update_beacon_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_beacon_app(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_beacon_app(uint64)void'] | undefined]>

  /**
   * Calls the update_discount_app(uint64)void ABI method.
   *
   * Updates the discount application ID.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateDiscountApp(params?: CallParams<FanbetLotteryArgs['obj']['update_discount_app(uint64)void'] | FanbetLotteryArgs['tuple']['update_discount_app(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_discount_app(uint64)void'] | undefined]>

  /**
   * Calls the update_reveal_duration(uint64)void ABI method.
   *
   * Updates the reveal phase duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRevealDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_reveal_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_reveal_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_reveal_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_submission_duration(uint64)void ABI method.
   *
   * Updates the submission phase duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateSubmissionDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_submission_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_submission_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_submission_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_payout_duration(uint64)void ABI method.
   *
   * Updates the payout phase duration.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePayoutDuration(params?: CallParams<FanbetLotteryArgs['obj']['update_payout_duration(uint64)void'] | FanbetLotteryArgs['tuple']['update_payout_duration(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_payout_duration(uint64)void'] | undefined]>

  /**
   * Calls the update_ticket_price(uint64)void ABI method.
   *
   * Updates the ticket price.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTicketPrice(params?: CallParams<FanbetLotteryArgs['obj']['update_ticket_price(uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_price(uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_ticket_price(uint64)void'] | undefined]>

  /**
   * Calls the update_ticket_token(uint64,uint64)void ABI method.
   *
   * Updates the ticket token and its decimal precision.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateTicketToken(params?: CallParams<FanbetLotteryArgs['obj']['update_ticket_token(uint64,uint64)void'] | FanbetLotteryArgs['tuple']['update_ticket_token(uint64,uint64)void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_ticket_token(uint64,uint64)void'] | undefined]>

  /**
   * Calls the update_percents((uint64,uint64,uint64,uint64))void ABI method.
   *
   * Updates the percentage distribution for prize allocation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePercents(params?: CallParams<FanbetLotteryArgs['obj']['update_percents((uint64,uint64,uint64,uint64))void'] | FanbetLotteryArgs['tuple']['update_percents((uint64,uint64,uint64,uint64))void']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['update_percents((uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the get_storage_cost(uint64)uint64 ABI method.
   *
   * Calculates the storage cost for a given number of tickets.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStorageCost(params?: CallParams<FanbetLotteryArgs['obj']['get_storage_cost(uint64)uint64'] | FanbetLotteryArgs['tuple']['get_storage_cost(uint64)uint64']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['get_storage_cost(uint64)uint64'] | undefined]>

  /**
   * Calls the get_winning_ticket()uint8[5] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getWinningTicket(params?: CallParams<FanbetLotteryArgs['obj']['get_winning_ticket()uint8[5]'] | FanbetLotteryArgs['tuple']['get_winning_ticket()uint8[5]']>): FanbetLotteryComposer<[...TReturns, FanbetLotteryReturns['get_winning_ticket()uint8[5]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FanbetLottery smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FanbetLotteryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FanbetLotteryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FanbetLotteryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FanbetLotteryComposerResults<TReturns>>
}
export type FanbetLotteryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

