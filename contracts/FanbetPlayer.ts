/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"FanbetPlayer","structs":{"Matches":[{"name":"threeMatch","type":"uint8"},{"name":"fourMatch","type":"uint8"},{"name":"fiveMatch","type":"uint8"}]},"methods":[{"name":"bootstrap","args":[{"name":"player_address","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"store_tickets","args":[{"name":"guesses","type":"uint8[5][]"},{"name":"game_round","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"compute_winnings","args":[{"name":"winning_ticket","type":"uint8[5]"},{"name":"game_round","type":"uint64"},{"name":"start","type":"uint64"},{"name":"stop","type":"uint64"}],"returns":{"type":"(uint8,uint8,uint8)","struct":"Matches"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_player","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"reset_tickets","args":[{"name":"game_round","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_tickets","args":[{"name":"start","type":"uint64"},{"name":"stop","type":"uint64"},{"name":"game_round","type":"uint64"}],"returns":{"type":"uint8[5][]"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_matches","args":[],"returns":{"type":"(uint8,uint8,uint8)","struct":"Matches"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"get_tickets_length","args":[{"name":"game_round","type":"uint64"}],"returns":{"type":"uint64"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"lottery":{"key":"bG90dGVyeQ==","keyType":"AVMString","valueType":"AVMBytes"},"matches":{"key":"bWF0Y2hlcw==","keyType":"AVMString","valueType":"AVMBytes"},"player":{"key":"cGxheWVy","keyType":"AVMString","valueType":"AVMBytes"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Matches = {
  threeMatch: number,
  fourMatch: number,
  fiveMatch: number
}


/**
 * Converts the ABI tuple representation of a Matches to the struct representation
 */
export function MatchesFromTuple(abiTuple: [number, number, number]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Matches, APP_SPEC.structs) as Matches
}

/**
 * The argument types for the FanbetPlayer contract
 */
export type FanbetPlayerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(address)void': {
      playerAddress: string
    }
    'store_tickets(uint8[5][],uint64)void': {
      guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][]
      gameRound: bigint | number
    }
    'compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)': {
      winningTicket: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]
      gameRound: bigint | number
      start: bigint | number
      stop: bigint | number
    }
    'reset_player()void': Record<string, never>
    'reset_tickets(uint64)void': {
      gameRound: bigint | number
    }
    'get_tickets(uint64,uint64,uint64)uint8[5][]': {
      start: bigint | number
      stop: bigint | number
      gameRound: bigint | number
    }
    'get_matches()(uint8,uint8,uint8)': Record<string, never>
    'get_tickets_length(uint64)uint64': {
      gameRound: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(address)void': [playerAddress: string]
    'store_tickets(uint8[5][],uint64)void': [guesses: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number][], gameRound: bigint | number]
    'compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)': [winningTicket: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number], gameRound: bigint | number, start: bigint | number, stop: bigint | number]
    'reset_player()void': []
    'reset_tickets(uint64)void': [gameRound: bigint | number]
    'get_tickets(uint64,uint64,uint64)uint8[5][]': [start: bigint | number, stop: bigint | number, gameRound: bigint | number]
    'get_matches()(uint8,uint8,uint8)': []
    'get_tickets_length(uint64)uint64': [gameRound: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FanbetPlayerReturns = {
  'bootstrap(address)void': void
  'store_tickets(uint8[5][],uint64)void': void
  'compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)': Matches
  'reset_player()void': void
  'reset_tickets(uint64)void': void
  'get_tickets(uint64,uint64,uint64)uint8[5][]': [number, number, number, number, number][]
  'get_matches()(uint8,uint8,uint8)': Matches
  'get_tickets_length(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the FanbetPlayer smart contract.
 */
export type FanbetPlayerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(address)void' | 'bootstrap', {
      argsObj: FanbetPlayerArgs['obj']['bootstrap(address)void']
      argsTuple: FanbetPlayerArgs['tuple']['bootstrap(address)void']
      returns: FanbetPlayerReturns['bootstrap(address)void']
    }>
    & Record<'store_tickets(uint8[5][],uint64)void' | 'store_tickets', {
      argsObj: FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void']
      argsTuple: FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']
      returns: FanbetPlayerReturns['store_tickets(uint8[5][],uint64)void']
    }>
    & Record<'compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)' | 'compute_winnings', {
      argsObj: FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']
      argsTuple: FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']
      returns: FanbetPlayerReturns['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']
    }>
    & Record<'reset_player()void' | 'reset_player', {
      argsObj: FanbetPlayerArgs['obj']['reset_player()void']
      argsTuple: FanbetPlayerArgs['tuple']['reset_player()void']
      returns: FanbetPlayerReturns['reset_player()void']
    }>
    & Record<'reset_tickets(uint64)void' | 'reset_tickets', {
      argsObj: FanbetPlayerArgs['obj']['reset_tickets(uint64)void']
      argsTuple: FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']
      returns: FanbetPlayerReturns['reset_tickets(uint64)void']
    }>
    & Record<'get_tickets(uint64,uint64,uint64)uint8[5][]' | 'get_tickets', {
      argsObj: FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]']
      argsTuple: FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']
      returns: FanbetPlayerReturns['get_tickets(uint64,uint64,uint64)uint8[5][]']
    }>
    & Record<'get_matches()(uint8,uint8,uint8)' | 'get_matches', {
      argsObj: FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)']
      argsTuple: FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']
      returns: FanbetPlayerReturns['get_matches()(uint8,uint8,uint8)']
    }>
    & Record<'get_tickets_length(uint64)uint64' | 'get_tickets_length', {
      argsObj: FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64']
      argsTuple: FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']
      returns: FanbetPlayerReturns['get_tickets_length(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        lottery: BinaryState
        matches: BinaryState
        player: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FanbetPlayerSignatures = keyof FanbetPlayerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FanbetPlayerNonVoidMethodSignatures = keyof FanbetPlayerTypes['methods'] extends infer T ? T extends keyof FanbetPlayerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FanbetPlayer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FanbetPlayerSignatures> = FanbetPlayerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FanbetPlayer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FanbetPlayerSignatures> = FanbetPlayerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FanbetPlayerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FanbetPlayerCreateCallParams =
  | Expand<CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & {method: 'bootstrap'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & {method: 'bootstrap(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FanbetPlayerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FanbetPlayerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FanbetPlayer smart contract
 */
export abstract class FanbetPlayerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FanbetPlayerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'bootstrap':
          case 'bootstrap(address)void':
            return FanbetPlayerParamsFactory.create.bootstrap(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the FanbetPlayer smart contract using the bootstrap(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      bootstrap(params: CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'bootstrap(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.playerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the store_tickets(uint8[5][],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeTickets(params: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'store_tickets(uint8[5][],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.guesses, params.args.gameRound],
    }
  }
  /**
   * Constructs a no op call for the compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static computeWinnings(params: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.winningTicket, params.args.gameRound, params.args.start, params.args.stop],
    }
  }
  /**
   * Constructs a no op call for the reset_player()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetPlayer(params: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_player()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the reset_tickets(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resetTickets(params: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reset_tickets(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameRound],
    }
  }
  /**
   * Constructs a no op call for the get_tickets(uint64,uint64,uint64)uint8[5][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTickets(params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_tickets(uint64,uint64,uint64)uint8[5][]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.start, params.args.stop, params.args.gameRound],
    }
  }
  /**
   * Constructs a no op call for the get_matches()(uint8,uint8,uint8) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMatches(params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_matches()(uint8,uint8,uint8)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_tickets_length(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTicketsLength(params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_tickets_length(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.gameRound],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FanbetPlayer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FanbetPlayerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FanbetPlayerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FanbetPlayerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FanbetPlayerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FanbetPlayer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FanbetPlayerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FanbetPlayerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FanbetPlayerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FanbetPlayerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetPlayer smart contract using the bootstrap(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      bootstrap: (params: CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(FanbetPlayerParamsFactory.create.bootstrap(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetPlayer smart contract using the bootstrap(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      bootstrap: (params: CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(FanbetPlayerParamsFactory.create.bootstrap(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetPlayer smart contract using an ABI method call using the bootstrap(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      bootstrap: async (params: CallParams<FanbetPlayerArgs['obj']['bootstrap(address)void'] | FanbetPlayerArgs['tuple']['bootstrap(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(FanbetPlayerParamsFactory.create.bootstrap(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FanbetPlayerReturns['bootstrap(address)void']) }, appClient: new FanbetPlayerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FanbetPlayer smart contract
 */
export class FanbetPlayerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FanbetPlayerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FanbetPlayer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FanbetPlayerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FanbetPlayerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FanbetPlayerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FanbetPlayerClient> {
    return new FanbetPlayerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FanbetPlayerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FanbetPlayerClient> {
    return new FanbetPlayerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetPlayer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `store_tickets(uint8[5][],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeTickets: (params: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.storeTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    computeWinnings: (params: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.computeWinnings(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_player()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetPlayer: (params: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.resetPlayer(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_tickets(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resetTickets: (params: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.resetTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets(uint64,uint64,uint64)uint8[5][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTickets: (params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.getTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_matches()(uint8,uint8,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMatches: (params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.getMatches(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets_length(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTicketsLength: (params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetPlayerParamsFactory.getTicketsLength(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetPlayer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `store_tickets(uint8[5][],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeTickets: (params: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.storeTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    computeWinnings: (params: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.computeWinnings(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_player()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetPlayer: (params: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.resetPlayer(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_tickets(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resetTickets: (params: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.resetTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets(uint64,uint64,uint64)uint8[5][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTickets: (params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.getTickets(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_matches()(uint8,uint8,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMatches: (params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.getMatches(params))
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets_length(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTicketsLength: (params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetPlayerParamsFactory.getTicketsLength(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetPlayer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `store_tickets(uint8[5][],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeTickets: async (params: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.storeTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['store_tickets(uint8[5][],uint64)void'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    computeWinnings: async (params: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.computeWinnings(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_player()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetPlayer: async (params: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.resetPlayer(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['reset_player()void'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `reset_tickets(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resetTickets: async (params: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.resetTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['reset_tickets(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets(uint64,uint64,uint64)uint8[5][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTickets: async (params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getTickets(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['get_tickets(uint64,uint64,uint64)uint8[5][]'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_matches()(uint8,uint8,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMatches: async (params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getMatches(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['get_matches()(uint8,uint8,uint8)'])}
    },

    /**
     * Makes a call to the FanbetPlayer smart contract using the `get_tickets_length(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTicketsLength: async (params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getTicketsLength(params))
      return {...result, return: result.return as unknown as (undefined | FanbetPlayerReturns['get_tickets_length(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FanbetPlayerClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FanbetPlayer smart contract using the `get_tickets(uint64,uint64,uint64)uint8[5][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTickets(params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']>) {
    const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getTickets(params))
    return result.return as unknown as FanbetPlayerReturns['get_tickets(uint64,uint64,uint64)uint8[5][]']
  }

  /**
   * Makes a readonly (simulated) call to the FanbetPlayer smart contract using the `get_matches()(uint8,uint8,uint8)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMatches(params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> = {args: []}) {
    const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getMatches(params))
    return result.return as unknown as FanbetPlayerReturns['get_matches()(uint8,uint8,uint8)']
  }

  /**
   * Makes a readonly (simulated) call to the FanbetPlayer smart contract using the `get_tickets_length(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getTicketsLength(params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']>) {
    const result = await this.appClient.send.call(FanbetPlayerParamsFactory.getTicketsLength(params))
    return result.return as unknown as FanbetPlayerReturns['get_tickets_length(uint64)uint64']
  }

  /**
   * Methods to access state for the current FanbetPlayer app
   */
  state = {
    /**
     * Methods to access global state for the current FanbetPlayer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          lottery: new BinaryStateValue(result.lottery),
          matches: new BinaryStateValue(result.matches),
          player: new BinaryStateValue(result.player),
        }
      },
      /**
       * Get the current value of the lottery key in global state
       */
      lottery: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lottery")) as Uint8Array | undefined) },
      /**
       * Get the current value of the matches key in global state
       */
      matches: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("matches")) as Uint8Array | undefined) },
      /**
       * Get the current value of the player key in global state
       */
      player: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("player")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): FanbetPlayerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a store_tickets(uint8[5][],uint64)void method call against the FanbetPlayer contract
       */
      storeTickets(params: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8) method call against the FanbetPlayer contract
       */
      computeWinnings(params: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.computeWinnings(params)))
        resultMappers.push((v) => client.decodeReturnValue('compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)', v))
        return this
      },
      /**
       * Add a reset_player()void method call against the FanbetPlayer contract
       */
      resetPlayer(params: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetPlayer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reset_tickets(uint64)void method call against the FanbetPlayer contract
       */
      resetTickets(params: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resetTickets(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_tickets(uint64,uint64,uint64)uint8[5][] method call against the FanbetPlayer contract
       */
      getTickets(params: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTickets(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_tickets(uint64,uint64,uint64)uint8[5][]', v))
        return this
      },
      /**
       * Add a get_matches()(uint8,uint8,uint8) method call against the FanbetPlayer contract
       */
      getMatches(params: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMatches(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_matches()(uint8,uint8,uint8)', v))
        return this
      },
      /**
       * Add a get_tickets_length(uint64)uint64 method call against the FanbetPlayer contract
       */
      getTicketsLength(params: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTicketsLength(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_tickets_length(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the FanbetPlayer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FanbetPlayerComposer
  }
}
export type FanbetPlayerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the store_tickets(uint8[5][],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeTickets(params?: CallParams<FanbetPlayerArgs['obj']['store_tickets(uint8[5][],uint64)void'] | FanbetPlayerArgs['tuple']['store_tickets(uint8[5][],uint64)void']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['store_tickets(uint8[5][],uint64)void'] | undefined]>

  /**
   * Calls the compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  computeWinnings(params?: CallParams<FanbetPlayerArgs['obj']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)'] | undefined]>

  /**
   * Calls the reset_player()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetPlayer(params?: CallParams<FanbetPlayerArgs['obj']['reset_player()void'] | FanbetPlayerArgs['tuple']['reset_player()void']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['reset_player()void'] | undefined]>

  /**
   * Calls the reset_tickets(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resetTickets(params?: CallParams<FanbetPlayerArgs['obj']['reset_tickets(uint64)void'] | FanbetPlayerArgs['tuple']['reset_tickets(uint64)void']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['reset_tickets(uint64)void'] | undefined]>

  /**
   * Calls the get_tickets(uint64,uint64,uint64)uint8[5][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTickets(params?: CallParams<FanbetPlayerArgs['obj']['get_tickets(uint64,uint64,uint64)uint8[5][]'] | FanbetPlayerArgs['tuple']['get_tickets(uint64,uint64,uint64)uint8[5][]']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['get_tickets(uint64,uint64,uint64)uint8[5][]'] | undefined]>

  /**
   * Calls the get_matches()(uint8,uint8,uint8) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMatches(params?: CallParams<FanbetPlayerArgs['obj']['get_matches()(uint8,uint8,uint8)'] | FanbetPlayerArgs['tuple']['get_matches()(uint8,uint8,uint8)']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['get_matches()(uint8,uint8,uint8)'] | undefined]>

  /**
   * Calls the get_tickets_length(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTicketsLength(params?: CallParams<FanbetPlayerArgs['obj']['get_tickets_length(uint64)uint64'] | FanbetPlayerArgs['tuple']['get_tickets_length(uint64)uint64']>): FanbetPlayerComposer<[...TReturns, FanbetPlayerReturns['get_tickets_length(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FanbetPlayer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FanbetPlayerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FanbetPlayerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FanbetPlayerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FanbetPlayerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FanbetPlayerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FanbetPlayerComposerResults<TReturns>>
}
export type FanbetPlayerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

