/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"FanbetDiscounter","desc":"\n    A smart contract for managing discounts for Fanbet users. It supports legacy holders\n    and regular users, allowing executors to configure discounts and manage legacy holders.\n    ","structs":{"Holdings":[{"name":"legacy","type":"bool"},{"name":"regular","type":"bool"}]},"methods":[{"name":"get_discount","desc":"Retrieves the discount for a given holder.","args":[{"name":"holder","type":"address","desc":"The address of the holder."}],"returns":{"type":"uint64","desc":"The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"get_holding","desc":"Returns holdings of a given holder.","args":[{"name":"holder","type":"address","desc":"The address of the holder."}],"returns":{"type":"(bool,bool)","desc":"True if the holder is a legacy holder, False otherwise.","struct":"Holdings"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrap","desc":"Bootstraps the contract with initial configuration values.","args":[{"name":"legacy_discount","type":"uint64","desc":"The discount value for legacy holders."},{"name":"regular_discount","type":"uint64","desc":"The discount value for regular holders."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_executor_account","desc":"Updates the executor account.","args":[{"name":"new_executor","type":"address","desc":"The address of the new executor."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"add_holder","desc":"Adds a new holder to the smart contract.","args":[{"name":"holder","type":"address","desc":"An addresses to be added as a regular or legacy holders."},{"name":"holding","type":"(bool,bool)","struct":"Holdings"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_holder","desc":"Adds a new holder to the smart contract.","args":[{"name":"holder","type":"address","desc":"An addresses to be added as a regular or legacy holders."},{"name":"holding","type":"(bool,bool)","struct":"Holdings"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_legacy_discount","desc":"Updates the legacy discount value.","args":[{"name":"new_discount","type":"uint64","desc":"The new legacy discount value."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_regular_discount","desc":"Updates the regular discount value.","args":[{"name":"new_discount","type":"uint64","desc":"The new regular discount value."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"bootstrapped":{"key":"Ym9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64"},"executor":{"key":"ZXhlY3V0b3I=","keyType":"AVMString","valueType":"AVMBytes"},"legacy_discount":{"key":"bGVnYWN5X2Rpc2NvdW50","keyType":"AVMString","valueType":"AVMUint64"},"regular_discount":{"key":"cmVndWxhcl9kaXNjb3VudA==","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2Rpc2NvdW50ZXIuY29udHJhY3QuRmFuYmV0RGlzY291bnRlci5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEKICAgIGJ5dGVjYmxvY2sgImV4ZWN1dG9yIiAweDAwICJoXyIgImxlZ2FjeV9kaXNjb3VudCIgInJlZ3VsYXJfZGlzY291bnQiICJib290c3RyYXBwZWQiIDB4MTUxZjdjNzUgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MzkKICAgIC8vIHNlbGYuZXhlY3V0b3IgPSBUeG4uc2VuZGVyCiAgICBieXRlY18wIC8vICJleGVjdXRvciIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6NDAKICAgIC8vIHNlbGYuYm9vdHN0cmFwcGVkID0gRmFsc2UKICAgIGJ5dGVjIDUgLy8gImJvb3RzdHJhcHBlZCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIEZhbmJldERpc2NvdW50ZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMwogICAgcHVzaGJ5dGVzcyAweGI2ZjA5NGU4IDB4MGNlYmNiZGIgMHg4YmVmMDUwZSAweDIzOWM0NzMzIDB4Y2Y0MmJiYzIgMHg3NTY0N2JkZCAweDg2YTUyNGRjIDB4MmZjOTlmYTggLy8gbWV0aG9kICJnZXRfZGlzY291bnQoYWRkcmVzcyl1aW50NjQiLCBtZXRob2QgImdldF9ob2xkaW5nKGFkZHJlc3MpKGJvb2wsYm9vbCkiLCBtZXRob2QgImJvb3RzdHJhcCh1aW50NjQsdWludDY0KXZvaWQiLCBtZXRob2QgInVwZGF0ZV9leGVjdXRvcl9hY2NvdW50KGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiYWRkX2hvbGRlcihhZGRyZXNzLChib29sLGJvb2wpKXZvaWQiLCBtZXRob2QgInVwZGF0ZV9ob2xkZXIoYWRkcmVzcywoYm9vbCxib29sKSl2b2lkIiwgbWV0aG9kICJ1cGRhdGVfbGVnYWN5X2Rpc2NvdW50KHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJ1cGRhdGVfcmVndWxhcl9kaXNjb3VudCh1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fZ2V0X2Rpc2NvdW50X3JvdXRlQDUgbWFpbl9nZXRfaG9sZGluZ19yb3V0ZUA2IG1haW5fYm9vdHN0cmFwX3JvdXRlQDcgbWFpbl91cGRhdGVfZXhlY3V0b3JfYWNjb3VudF9yb3V0ZUA4IG1haW5fYWRkX2hvbGRlcl9yb3V0ZUA5IG1haW5fdXBkYXRlX2hvbGRlcl9yb3V0ZUAxMCBtYWluX3VwZGF0ZV9sZWdhY3lfZGlzY291bnRfcm91dGVAMTEgbWFpbl91cGRhdGVfcmVndWxhcl9kaXNjb3VudF9yb3V0ZUAxMgoKbWFpbl9hZnRlcl9pZl9lbHNlQDE1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBGYW5iZXREaXNjb3VudGVyKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9yZWd1bGFyX2Rpc2NvdW50X3JvdXRlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE3MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgRmFuYmV0RGlzY291bnRlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE3MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwZGF0ZV9yZWd1bGFyX2Rpc2NvdW50CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZV9sZWdhY3lfZGlzY291bnRfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTU3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBGYW5iZXREaXNjb3VudGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTU3CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgdXBkYXRlX2xlZ2FjeV9kaXNjb3VudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVfaG9sZGVyX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgRmFuYmV0RGlzY291bnRlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE0MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHVwZGF0ZV9ob2xkZXIKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkX2hvbGRlcl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgRmFuYmV0RGlzY291bnRlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFkZF9ob2xkZXIKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlX2V4ZWN1dG9yX2FjY291bnRfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMTEKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIEZhbmJldERpc2NvdW50ZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMTEKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiB1cGRhdGVfZXhlY3V0b3JfYWNjb3VudAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9ib290c3RyYXBfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo4OQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMwogICAgLy8gY2xhc3MgRmFuYmV0RGlzY291bnRlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5Ojg5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYm9vdHN0cmFwCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9ob2xkaW5nX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6NjkKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBjbGFzcyBGYW5iZXREaXNjb3VudGVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6NjkKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X2hvbGRpbmcKICAgIGJ5dGVjIDYgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X2Rpc2NvdW50X3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6NDIKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIEZhbmJldERpc2NvdW50ZXIoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo0MgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGdldF9kaXNjb3VudAogICAgYnl0ZWMgNiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTMKICAgIC8vIGNsYXNzIEZhbmJldERpc2NvdW50ZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTUKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9kaXNjb3VudGVyLmNvbnRyYWN0LkZhbmJldERpc2NvdW50ZXIuZ2V0X2Rpc2NvdW50KGhvbGRlcjogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfZGlzY291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6NDItNDMKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIGdldF9kaXNjb3VudChzZWxmLCBob2xkZXI6IEFkZHJlc3MpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo1NQogICAgLy8gaWYgaG9sZGVyIG5vdCBpbiBzZWxmLmhvbGRlcnM6CiAgICBieXRlY18yIC8vICJoXyIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IGdldF9kaXNjb3VudF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo1NgogICAgLy8gcmV0dXJuIFVJbnQ2NCgwKQogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpnZXRfZGlzY291bnRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjU4CiAgICAvLyBob2xkaW5ncyA9IHNlbGYuaG9sZGVyc1tob2xkZXJdLmNvcHkoKQogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGR1cAogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSAwCiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5ob2xkZXJzIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjYwCiAgICAvLyBpZiBob2xkaW5ncy5sZWdhY3k6CiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICAhPQogICAgYnogZ2V0X2Rpc2NvdW50X2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjYxCiAgICAvLyByZXR1cm4gVUludDY0KHNlbGYubGVnYWN5X2Rpc2NvdW50KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImxlZ2FjeV9kaXNjb3VudCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5sZWdhY3lfZGlzY291bnQgZXhpc3RzCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZ2V0X2Rpc2NvdW50X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo2MwogICAgLy8gaWYgaG9sZGluZ3MucmVndWxhcjoKICAgIGZyYW1lX2RpZyAwCiAgICBpbnRjXzEgLy8gMQogICAgZ2V0Yml0CiAgICBieXRlY18xIC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMSAvLyAweDAwCiAgICAhPQogICAgYnogZ2V0X2Rpc2NvdW50X2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjY0CiAgICAvLyByZXR1cm4gVUludDY0KHNlbGYucmVndWxhcl9kaXNjb3VudCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJyZWd1bGFyX2Rpc2NvdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnJlZ3VsYXJfZGlzY291bnQgZXhpc3RzCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZ2V0X2Rpc2NvdW50X2FmdGVyX2lmX2Vsc2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo2NgogICAgLy8gcmV0dXJuIFVJbnQ2NCgwKQogICAgYnl0ZWMgNyAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9kaXNjb3VudGVyLmNvbnRyYWN0LkZhbmJldERpc2NvdW50ZXIuZ2V0X2hvbGRpbmcoaG9sZGVyOiBieXRlcykgLT4gYnl0ZXM6CmdldF9ob2xkaW5nOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjY5LTcwCiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X2hvbGRpbmcoc2VsZiwgaG9sZGVyOiBBZGRyZXNzKSAtPiBIb2xkaW5nczoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjgwCiAgICAvLyBpZiBob2xkZXIgbm90IGluIHNlbGYuaG9sZGVyczoKICAgIGJ5dGVjXzIgLy8gImhfIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogZ2V0X2hvbGRpbmdfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6ODEKICAgIC8vIHJldHVybiBIb2xkaW5ncyhsZWdhY3k9Qm9vbCgpLCByZWd1bGFyPUJvb2woKSkKICAgIGJ5dGVjXzEgLy8gMHgwMAogICAgc3dhcAogICAgcmV0c3ViCgpnZXRfaG9sZGluZ19hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6ODMKICAgIC8vIHJldHVybiBzZWxmLmhvbGRlcnNbaG9sZGVyXQogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmhvbGRlcnMgZW50cnkgZXhpc3RzCiAgICBzd2FwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2Rpc2NvdW50ZXIuY29udHJhY3QuRmFuYmV0RGlzY291bnRlci5ib290c3RyYXAobGVnYWN5X2Rpc2NvdW50OiBieXRlcywgcmVndWxhcl9kaXNjb3VudDogYnl0ZXMpIC0+IHZvaWQ6CmJvb3RzdHJhcDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weTo4OS05NAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgYm9vdHN0cmFwKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgbGVnYWN5X2Rpc2NvdW50OiBVSW50NjQsCiAgICAvLyAgICAgcmVndWxhcl9kaXNjb3VudDogVUludDY0LAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTA1CiAgICAvLyBhc3NlcnQgbm90IHNlbGYuYm9vdHN0cmFwcGVkLCBlcnIuQUxSRUFEWV9CT09UU1RSQVBQRUQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJib290c3RyYXBwZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYm9vdHN0cmFwcGVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIExvdHRlcnkgYWxyZWFkeSBib290c3RyYXBwZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxMDYKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEwOAogICAgLy8gc2VsZi5sZWdhY3lfZGlzY291bnQgPSBsZWdhY3lfZGlzY291bnQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGJ5dGVjXzMgLy8gImxlZ2FjeV9kaXNjb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTA5CiAgICAvLyBzZWxmLnJlZ3VsYXJfZGlzY291bnQgPSByZWd1bGFyX2Rpc2NvdW50Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBieXRlYyA0IC8vICJyZWd1bGFyX2Rpc2NvdW50IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfZGlzY291bnRlci5jb250cmFjdC5GYW5iZXREaXNjb3VudGVyLnVwZGF0ZV9leGVjdXRvcl9hY2NvdW50KG5ld19leGVjdXRvcjogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV9leGVjdXRvcl9hY2NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjExMS0xMTIKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV9leGVjdXRvcl9hY2NvdW50KHNlbGYsIG5ld19leGVjdXRvcjogQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEyMgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5leGVjdXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImV4ZWN1dG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmV4ZWN1dG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTIzCiAgICAvLyBzZWxmLmV4ZWN1dG9yID0gbmV3X2V4ZWN1dG9yLm5hdGl2ZQogICAgYnl0ZWNfMCAvLyAiZXhlY3V0b3IiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2Rpc2NvdW50ZXIuY29udHJhY3QuRmFuYmV0RGlzY291bnRlci5hZGRfaG9sZGVyKGhvbGRlcjogYnl0ZXMsIGhvbGRpbmc6IGJ5dGVzKSAtPiB2b2lkOgphZGRfaG9sZGVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEyNS0xMjYKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIGFkZF9ob2xkZXIoc2VsZiwgaG9sZGVyOiBBZGRyZXNzLCBob2xkaW5nOiBIb2xkaW5ncykgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjEzNwogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5leGVjdXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImV4ZWN1dG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmV4ZWN1dG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTM4CiAgICAvLyBzZWxmLmhvbGRlcnNbaG9sZGVyXSA9IGhvbGRpbmcuY29weSgpCiAgICBieXRlY18yIC8vICJoXyIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfZGlzY291bnRlci5jb250cmFjdC5GYW5iZXREaXNjb3VudGVyLnVwZGF0ZV9ob2xkZXIoaG9sZGVyOiBieXRlcywgaG9sZGluZzogYnl0ZXMpIC0+IHZvaWQ6CnVwZGF0ZV9ob2xkZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTQwLTE0MQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgdXBkYXRlX2hvbGRlcihzZWxmLCBob2xkZXI6IEFkZHJlc3MsIGhvbGRpbmc6IEhvbGRpbmdzKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTUyCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmV4ZWN1dG9yLCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZXhlY3V0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXhlY3V0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHVuYXV0aG9yaXplZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxNTMKICAgIC8vIGFzc2VydCBob2xkZXIgaW4gc2VsZi5ob2xkZXJzLCBlcnIuVU5BVVRIRU5USUNBVEVECiAgICBieXRlY18yIC8vICJoXyIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgaXMgbm90IHVuYXV0aGVudGljYXRlZCB0byBjYWxsIHRoaXMgZnVuY3Rpb24KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxNTUKICAgIC8vIHNlbGYuaG9sZGVyc1tob2xkZXJdID0gaG9sZGluZy5jb3B5KCkKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9kaXNjb3VudGVyLmNvbnRyYWN0LkZhbmJldERpc2NvdW50ZXIudXBkYXRlX2xlZ2FjeV9kaXNjb3VudChuZXdfZGlzY291bnQ6IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfbGVnYWN5X2Rpc2NvdW50OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE1Ny0xNTgKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHVwZGF0ZV9sZWdhY3lfZGlzY291bnQoc2VsZiwgbmV3X2Rpc2NvdW50OiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxNjgKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYuZXhlY3V0b3IsIGVyci5VTkFVVEhPUklaRUQKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJleGVjdXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leGVjdXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE2OQogICAgLy8gc2VsZi5sZWdhY3lfZGlzY291bnQgPSBuZXdfZGlzY291bnQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGJ5dGVjXzMgLy8gImxlZ2FjeV9kaXNjb3VudCIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X2Rpc2NvdW50ZXIuY29udHJhY3QuRmFuYmV0RGlzY291bnRlci51cGRhdGVfcmVndWxhcl9kaXNjb3VudChuZXdfZGlzY291bnQ6IGJ5dGVzKSAtPiB2b2lkOgp1cGRhdGVfcmVndWxhcl9kaXNjb3VudDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfZGlzY291bnRlci9jb250cmFjdC5weToxNzEtMTcyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiB1cGRhdGVfcmVndWxhcl9kaXNjb3VudChzZWxmLCBuZXdfZGlzY291bnQ6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9kaXNjb3VudGVyL2NvbnRyYWN0LnB5OjE4MgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5leGVjdXRvciwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImV4ZWN1dG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmV4ZWN1dG9yIGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X2Rpc2NvdW50ZXIvY29udHJhY3QucHk6MTgzCiAgICAvLyBzZWxmLnJlZ3VsYXJfZGlzY291bnQgPSBuZXdfZGlzY291bnQubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGJ5dGVjIDQgLy8gInJlZ3VsYXJfZGlzY291bnQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Holdings = {
  legacy: boolean,
  regular: boolean
}


/**
 * Converts the ABI tuple representation of a Holdings to the struct representation
 */
export function HoldingsFromTuple(abiTuple: [boolean, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Holdings, APP_SPEC.structs) as Holdings
}

/**
 * The argument types for the FanbetDiscounter contract
 */
export type FanbetDiscounterArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'get_discount(address)uint64': {
      /**
       * The address of the holder.
       */
      holder: string
    }
    'get_holding(address)(bool,bool)': {
      /**
       * The address of the holder.
       */
      holder: string
    }
    'bootstrap(uint64,uint64)void': {
      /**
       * The discount value for legacy holders.
       */
      legacyDiscount: bigint | number
      /**
       * The discount value for regular holders.
       */
      regularDiscount: bigint | number
    }
    'update_executor_account(address)void': {
      /**
       * The address of the new executor.
       */
      newExecutor: string
    }
    'add_holder(address,(bool,bool))void': {
      /**
       * An addresses to be added as a regular or legacy holders.
       */
      holder: string
      holding: Holdings
    }
    'update_holder(address,(bool,bool))void': {
      /**
       * An addresses to be added as a regular or legacy holders.
       */
      holder: string
      holding: Holdings
    }
    'update_legacy_discount(uint64)void': {
      /**
       * The new legacy discount value.
       */
      newDiscount: bigint | number
    }
    'update_regular_discount(uint64)void': {
      /**
       * The new regular discount value.
       */
      newDiscount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'get_discount(address)uint64': [holder: string]
    'get_holding(address)(bool,bool)': [holder: string]
    'bootstrap(uint64,uint64)void': [legacyDiscount: bigint | number, regularDiscount: bigint | number]
    'update_executor_account(address)void': [newExecutor: string]
    'add_holder(address,(bool,bool))void': [holder: string, holding: Holdings]
    'update_holder(address,(bool,bool))void': [holder: string, holding: Holdings]
    'update_legacy_discount(uint64)void': [newDiscount: bigint | number]
    'update_regular_discount(uint64)void': [newDiscount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FanbetDiscounterReturns = {
  'get_discount(address)uint64': bigint
  'get_holding(address)(bool,bool)': Holdings
  'bootstrap(uint64,uint64)void': void
  'update_executor_account(address)void': void
  'add_holder(address,(bool,bool))void': void
  'update_holder(address,(bool,bool))void': void
  'update_legacy_discount(uint64)void': void
  'update_regular_discount(uint64)void': void
}

/**
 * Defines the types of available calls and state of the FanbetDiscounter smart contract.
 */
export type FanbetDiscounterTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_discount(address)uint64' | 'get_discount', {
      argsObj: FanbetDiscounterArgs['obj']['get_discount(address)uint64']
      argsTuple: FanbetDiscounterArgs['tuple']['get_discount(address)uint64']
      /**
       * The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise.
       */
      returns: FanbetDiscounterReturns['get_discount(address)uint64']
    }>
    & Record<'get_holding(address)(bool,bool)' | 'get_holding', {
      argsObj: FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)']
      argsTuple: FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']
      /**
       * True if the holder is a legacy holder, False otherwise.
       */
      returns: FanbetDiscounterReturns['get_holding(address)(bool,bool)']
    }>
    & Record<'bootstrap(uint64,uint64)void' | 'bootstrap', {
      argsObj: FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']
      returns: FanbetDiscounterReturns['bootstrap(uint64,uint64)void']
    }>
    & Record<'update_executor_account(address)void' | 'update_executor_account', {
      argsObj: FanbetDiscounterArgs['obj']['update_executor_account(address)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_executor_account(address)void']
      returns: FanbetDiscounterReturns['update_executor_account(address)void']
    }>
    & Record<'add_holder(address,(bool,bool))void' | 'add_holder', {
      argsObj: FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void']
      argsTuple: FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']
      returns: FanbetDiscounterReturns['add_holder(address,(bool,bool))void']
    }>
    & Record<'update_holder(address,(bool,bool))void' | 'update_holder', {
      argsObj: FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']
      returns: FanbetDiscounterReturns['update_holder(address,(bool,bool))void']
    }>
    & Record<'update_legacy_discount(uint64)void' | 'update_legacy_discount', {
      argsObj: FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']
      returns: FanbetDiscounterReturns['update_legacy_discount(uint64)void']
    }>
    & Record<'update_regular_discount(uint64)void' | 'update_regular_discount', {
      argsObj: FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']
      returns: FanbetDiscounterReturns['update_regular_discount(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        bootstrapped: bigint
        executor: BinaryState
        legacyDiscount: bigint
        regularDiscount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FanbetDiscounterSignatures = keyof FanbetDiscounterTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FanbetDiscounterNonVoidMethodSignatures = keyof FanbetDiscounterTypes['methods'] extends infer T ? T extends keyof FanbetDiscounterTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FanbetDiscounter smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FanbetDiscounterSignatures> = FanbetDiscounterTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FanbetDiscounter smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FanbetDiscounterSignatures> = FanbetDiscounterTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FanbetDiscounterTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FanbetDiscounterCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FanbetDiscounterDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FanbetDiscounterCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FanbetDiscounter smart contract
 */
export abstract class FanbetDiscounterParamsFactory {
  /**
   * Constructs a no op call for the get_discount(address)uint64 ABI method
   *
   * Retrieves the discount for a given holder.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDiscount(params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_discount(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder],
    }
  }
  /**
   * Constructs a no op call for the get_holding(address)(bool,bool) ABI method
   *
   * Returns holdings of a given holder.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getHolding(params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_holding(address)(bool,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64)void ABI method
   *
   * Bootstraps the contract with initial configuration values.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.legacyDiscount, params.args.regularDiscount],
    }
  }
  /**
   * Constructs a no op call for the update_executor_account(address)void ABI method
   *
   * Updates the executor account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateExecutorAccount(params: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_executor_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newExecutor],
    }
  }
  /**
   * Constructs a no op call for the add_holder(address,(bool,bool))void ABI method
   *
   * Adds a new holder to the smart contract.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addHolder(params: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_holder(address,(bool,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.holding],
    }
  }
  /**
   * Constructs a no op call for the update_holder(address,(bool,bool))void ABI method
   *
   * Adds a new holder to the smart contract.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateHolder(params: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_holder(address,(bool,bool))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.holding],
    }
  }
  /**
   * Constructs a no op call for the update_legacy_discount(uint64)void ABI method
   *
   * Updates the legacy discount value.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLegacyDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_legacy_discount(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscount],
    }
  }
  /**
   * Constructs a no op call for the update_regular_discount(uint64)void ABI method
   *
   * Updates the regular discount value.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRegularDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_regular_discount(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FanbetDiscounter smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FanbetDiscounterFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FanbetDiscounterFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FanbetDiscounterClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FanbetDiscounterClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FanbetDiscounter smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FanbetDiscounterDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FanbetDiscounterClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FanbetDiscounterClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FanbetDiscounter smart contract
 */
export class FanbetDiscounterClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FanbetDiscounterClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FanbetDiscounter app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FanbetDiscounterClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FanbetDiscounterNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FanbetDiscounterClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FanbetDiscounterClient> {
    return new FanbetDiscounterClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FanbetDiscounterClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FanbetDiscounterClient> {
    return new FanbetDiscounterClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * Retrieves the discount for a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise.
     */
    getDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_holding(address)(bool,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns holdings of a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call params: True if the holder is a legacy holder, False otherwise.
     */
    getHolding: (params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.getHolding(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * Bootstraps the contract with initial configuration values.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateExecutorAccount: (params: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addHolder: (params: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.addHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateHolder: (params: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * Updates the legacy discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLegacyDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * Updates the regular discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRegularDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * Retrieves the discount for a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise.
     */
    getDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_holding(address)(bool,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns holdings of a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: True if the holder is a legacy holder, False otherwise.
     */
    getHolding: (params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.getHolding(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * Bootstraps the contract with initial configuration values.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateExecutorAccount: (params: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateExecutorAccount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addHolder: (params: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.addHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateHolder: (params: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * Updates the legacy discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLegacyDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * Updates the regular discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRegularDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * Retrieves the discount for a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise.
     */
    getDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.getDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['get_discount(address)uint64'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_holding(address)(bool,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns holdings of a given holder.
     *
     * @param params The params for the smart contract call
     * @returns The call result: True if the holder is a legacy holder, False otherwise.
     */
    getHolding: async (params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.getHolding(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['get_holding(address)(bool,bool)'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * Bootstraps the contract with initial configuration values.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['bootstrap(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_executor_account(address)void` ABI method.
     *
     * Updates the executor account.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateExecutorAccount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateExecutorAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_executor_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addHolder: async (params: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.addHolder(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['add_holder(address,(bool,bool))void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_holder(address,(bool,bool))void` ABI method.
     *
     * Adds a new holder to the smart contract.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateHolder: async (params: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateHolder(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_holder(address,(bool,bool))void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * Updates the legacy discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLegacyDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_legacy_discount(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * Updates the regular discount value.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRegularDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_regular_discount(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FanbetDiscounterClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FanbetDiscounter smart contract using the `get_holding(address)(bool,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns holdings of a given holder.
   *
   * @param params The params for the smart contract call
   * @returns The call result: True if the holder is a legacy holder, False otherwise.
   */
  async getHolding(params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']>) {
    const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.getHolding(params))
    return result.return as unknown as FanbetDiscounterReturns['get_holding(address)(bool,bool)']
  }

  /**
   * Methods to access state for the current FanbetDiscounter app
   */
  state = {
    /**
     * Methods to access global state for the current FanbetDiscounter app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          bootstrapped: result.bootstrapped,
          executor: new BinaryStateValue(result.executor),
          legacyDiscount: result.legacy_discount,
          regularDiscount: result.regular_discount,
        }
      },
      /**
       * Get the current value of the bootstrapped key in global state
       */
      bootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the executor key in global state
       */
      executor: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("executor")) as Uint8Array | undefined) },
      /**
       * Get the current value of the legacy_discount key in global state
       */
      legacyDiscount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("legacy_discount")) as bigint | undefined },
      /**
       * Get the current value of the regular_discount key in global state
       */
      regularDiscount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("regular_discount")) as bigint | undefined },
    },
  }

  public newGroup(): FanbetDiscounterComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_discount(address)uint64 method call against the FanbetDiscounter contract
       */
      getDiscount(params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDiscount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_discount(address)uint64', v))
        return this
      },
      /**
       * Add a get_holding(address)(bool,bool) method call against the FanbetDiscounter contract
       */
      getHolding(params: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getHolding(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_holding(address)(bool,bool)', v))
        return this
      },
      /**
       * Add a bootstrap(uint64,uint64)void method call against the FanbetDiscounter contract
       */
      bootstrap(params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_executor_account(address)void method call against the FanbetDiscounter contract
       */
      updateExecutorAccount(params: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateExecutorAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add_holder(address,(bool,bool))void method call against the FanbetDiscounter contract
       */
      addHolder(params: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addHolder(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_holder(address,(bool,bool))void method call against the FanbetDiscounter contract
       */
      updateHolder(params: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateHolder(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_legacy_discount(uint64)void method call against the FanbetDiscounter contract
       */
      updateLegacyDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLegacyDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_regular_discount(uint64)void method call against the FanbetDiscounter contract
       */
      updateRegularDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRegularDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the FanbetDiscounter contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FanbetDiscounterComposer
  }
}
export type FanbetDiscounterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_discount(address)uint64 ABI method.
   *
   * Retrieves the discount for a given holder.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['get_discount(address)uint64'] | undefined]>

  /**
   * Calls the get_holding(address)(bool,bool) ABI method.
   *
   * Returns holdings of a given holder.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getHolding(params?: CallParams<FanbetDiscounterArgs['obj']['get_holding(address)(bool,bool)'] | FanbetDiscounterArgs['tuple']['get_holding(address)(bool,bool)']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['get_holding(address)(bool,bool)'] | undefined]>

  /**
   * Calls the bootstrap(uint64,uint64)void ABI method.
   *
   * Bootstraps the contract with initial configuration values.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['bootstrap(uint64,uint64)void'] | undefined]>

  /**
   * Calls the update_executor_account(address)void ABI method.
   *
   * Updates the executor account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateExecutorAccount(params?: CallParams<FanbetDiscounterArgs['obj']['update_executor_account(address)void'] | FanbetDiscounterArgs['tuple']['update_executor_account(address)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_executor_account(address)void'] | undefined]>

  /**
   * Calls the add_holder(address,(bool,bool))void ABI method.
   *
   * Adds a new holder to the smart contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addHolder(params?: CallParams<FanbetDiscounterArgs['obj']['add_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['add_holder(address,(bool,bool))void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['add_holder(address,(bool,bool))void'] | undefined]>

  /**
   * Calls the update_holder(address,(bool,bool))void ABI method.
   *
   * Adds a new holder to the smart contract.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateHolder(params?: CallParams<FanbetDiscounterArgs['obj']['update_holder(address,(bool,bool))void'] | FanbetDiscounterArgs['tuple']['update_holder(address,(bool,bool))void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_holder(address,(bool,bool))void'] | undefined]>

  /**
   * Calls the update_legacy_discount(uint64)void ABI method.
   *
   * Updates the legacy discount value.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLegacyDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_legacy_discount(uint64)void'] | undefined]>

  /**
   * Calls the update_regular_discount(uint64)void ABI method.
   *
   * Updates the regular discount value.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRegularDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_regular_discount(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FanbetDiscounterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FanbetDiscounterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FanbetDiscounterComposerResults<TReturns>>
}
export type FanbetDiscounterComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

