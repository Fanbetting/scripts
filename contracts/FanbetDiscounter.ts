/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"FanbetDiscounter","structs":{},"methods":[{"name":"get_discount","args":[{"name":"holder","type":"address"}],"returns":{"type":"uint64"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"is_legacy_holder","args":[{"name":"holder","type":"address"}],"returns":{"type":"bool"},"events":[],"readonly":true,"actions":{"create":[],"call":["NoOp"]}},{"name":"bootstrap","args":[{"name":"legacy_discount","type":"uint64"},{"name":"regular_discount","type":"uint64"},{"name":"registry_id","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"add_legacy_holders","args":[{"name":"holders","type":"address[]"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_admin_account","args":[{"name":"new_admin","type":"address"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_legacy_discount","args":[{"name":"new_discount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_legacy_holder","args":[{"name":"holder","type":"address"},{"name":"name","type":"string"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"update_regular_discount","args":[{"name":"new_discount","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":4,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"administrator":{"key":"YWRtaW5pc3RyYXRvcg==","keyType":"AVMString","valueType":"AVMBytes"},"bootstrapped":{"key":"Ym9vdHN0cmFwcGVk","keyType":"AVMString","valueType":"AVMUint64"},"legacy_discount":{"key":"bGVnYWN5X2Rpc2NvdW50","keyType":"AVMString","valueType":"AVMUint64"},"registry_app":{"key":"cmVnaXN0cnlfYXBw","keyType":"AVMString","valueType":"AVMUint64"},"regular_discount":{"key":"cmVndWxhcl9kaXNjb3VudA==","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FanbetDiscounter contract
 */
export type FanbetDiscounterArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'get_discount(address)uint64': {
      holder: string
    }
    'is_legacy_holder(address)bool': {
      holder: string
    }
    'bootstrap(uint64,uint64,uint64)void': {
      legacyDiscount: bigint | number
      regularDiscount: bigint | number
      registryId: bigint | number
    }
    'add_legacy_holders(address[])void': {
      holders: string[]
    }
    'update_admin_account(address)void': {
      newAdmin: string
    }
    'update_legacy_discount(uint64)void': {
      newDiscount: bigint | number
    }
    'update_legacy_holder(address,string)void': {
      holder: string
      name: string
    }
    'update_regular_discount(uint64)void': {
      newDiscount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'get_discount(address)uint64': [holder: string]
    'is_legacy_holder(address)bool': [holder: string]
    'bootstrap(uint64,uint64,uint64)void': [legacyDiscount: bigint | number, regularDiscount: bigint | number, registryId: bigint | number]
    'add_legacy_holders(address[])void': [holders: string[]]
    'update_admin_account(address)void': [newAdmin: string]
    'update_legacy_discount(uint64)void': [newDiscount: bigint | number]
    'update_legacy_holder(address,string)void': [holder: string, name: string]
    'update_regular_discount(uint64)void': [newDiscount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FanbetDiscounterReturns = {
  'get_discount(address)uint64': bigint
  'is_legacy_holder(address)bool': boolean
  'bootstrap(uint64,uint64,uint64)void': void
  'add_legacy_holders(address[])void': void
  'update_admin_account(address)void': void
  'update_legacy_discount(uint64)void': void
  'update_legacy_holder(address,string)void': void
  'update_regular_discount(uint64)void': void
}

/**
 * Defines the types of available calls and state of the FanbetDiscounter smart contract.
 */
export type FanbetDiscounterTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_discount(address)uint64' | 'get_discount', {
      argsObj: FanbetDiscounterArgs['obj']['get_discount(address)uint64']
      argsTuple: FanbetDiscounterArgs['tuple']['get_discount(address)uint64']
      returns: FanbetDiscounterReturns['get_discount(address)uint64']
    }>
    & Record<'is_legacy_holder(address)bool' | 'is_legacy_holder', {
      argsObj: FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool']
      argsTuple: FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']
      returns: FanbetDiscounterReturns['is_legacy_holder(address)bool']
    }>
    & Record<'bootstrap(uint64,uint64,uint64)void' | 'bootstrap', {
      argsObj: FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']
      returns: FanbetDiscounterReturns['bootstrap(uint64,uint64,uint64)void']
    }>
    & Record<'add_legacy_holders(address[])void' | 'add_legacy_holders', {
      argsObj: FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void']
      argsTuple: FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']
      returns: FanbetDiscounterReturns['add_legacy_holders(address[])void']
    }>
    & Record<'update_admin_account(address)void' | 'update_admin_account', {
      argsObj: FanbetDiscounterArgs['obj']['update_admin_account(address)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_admin_account(address)void']
      returns: FanbetDiscounterReturns['update_admin_account(address)void']
    }>
    & Record<'update_legacy_discount(uint64)void' | 'update_legacy_discount', {
      argsObj: FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']
      returns: FanbetDiscounterReturns['update_legacy_discount(uint64)void']
    }>
    & Record<'update_legacy_holder(address,string)void' | 'update_legacy_holder', {
      argsObj: FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']
      returns: FanbetDiscounterReturns['update_legacy_holder(address,string)void']
    }>
    & Record<'update_regular_discount(uint64)void' | 'update_regular_discount', {
      argsObj: FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void']
      argsTuple: FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']
      returns: FanbetDiscounterReturns['update_regular_discount(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        administrator: BinaryState
        bootstrapped: bigint
        legacyDiscount: bigint
        registryApp: bigint
        regularDiscount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FanbetDiscounterSignatures = keyof FanbetDiscounterTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FanbetDiscounterNonVoidMethodSignatures = keyof FanbetDiscounterTypes['methods'] extends infer T ? T extends keyof FanbetDiscounterTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FanbetDiscounter smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FanbetDiscounterSignatures> = FanbetDiscounterTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FanbetDiscounter smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FanbetDiscounterSignatures> = FanbetDiscounterTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FanbetDiscounterTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FanbetDiscounterCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FanbetDiscounterDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FanbetDiscounterCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FanbetDiscounter smart contract
 */
export abstract class FanbetDiscounterParamsFactory {
  /**
   * Constructs a no op call for the get_discount(address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDiscount(params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_discount(address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder],
    }
  }
  /**
   * Constructs a no op call for the is_legacy_holder(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isLegacyHolder(params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'is_legacy_holder(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder],
    }
  }
  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.legacyDiscount, params.args.regularDiscount, params.args.registryId],
    }
  }
  /**
   * Constructs a no op call for the add_legacy_holders(address[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLegacyHolders(params: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_legacy_holders(address[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holders],
    }
  }
  /**
   * Constructs a no op call for the update_admin_account(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdminAccount(params: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_admin_account(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the update_legacy_discount(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLegacyDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_legacy_discount(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscount],
    }
  }
  /**
   * Constructs a no op call for the update_legacy_holder(address,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateLegacyHolder(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_legacy_holder(address,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.holder, params.args.name],
    }
  }
  /**
   * Constructs a no op call for the update_regular_discount(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRegularDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_regular_discount(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newDiscount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FanbetDiscounter smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FanbetDiscounterFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FanbetDiscounterFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FanbetDiscounterClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FanbetDiscounterClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FanbetDiscounter smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FanbetDiscounterDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FanbetDiscounterClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FanbetDiscounter smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FanbetDiscounterClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FanbetDiscounter smart contract
 */
export class FanbetDiscounterClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FanbetDiscounterClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FanbetDiscounter app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FanbetDiscounterClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FanbetDiscounterNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FanbetDiscounterClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FanbetDiscounterClient> {
    return new FanbetDiscounterClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FanbetDiscounterClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FanbetDiscounterClient> {
    return new FanbetDiscounterClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `is_legacy_holder(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isLegacyHolder: (params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.isLegacyHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_legacy_holders(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLegacyHolders: (params: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.addLegacyHolders(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdminAccount: (params: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLegacyDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_holder(address,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateLegacyHolder: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateLegacyHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRegularDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.getDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `is_legacy_holder(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isLegacyHolder: (params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.isLegacyHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_legacy_holders(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLegacyHolders: (params: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.addLegacyHolders(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdminAccount: (params: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateAdminAccount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLegacyDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_holder(address,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateLegacyHolder: (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateLegacyHolder(params))
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRegularDiscount: (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `get_discount(address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.getDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['get_discount(address)uint64'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `is_legacy_holder(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isLegacyHolder: async (params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.isLegacyHolder(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['is_legacy_holder(address)bool'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `bootstrap(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['bootstrap(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `add_legacy_holders(address[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLegacyHolders: async (params: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.addLegacyHolders(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['add_legacy_holders(address[])void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_admin_account(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdminAccount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateAdminAccount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_admin_account(address)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLegacyDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateLegacyDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_legacy_discount(uint64)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_legacy_holder(address,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateLegacyHolder: async (params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateLegacyHolder(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_legacy_holder(address,string)void'])}
    },

    /**
     * Makes a call to the FanbetDiscounter smart contract using the `update_regular_discount(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRegularDiscount: async (params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.updateRegularDiscount(params))
      return {...result, return: result.return as unknown as (undefined | FanbetDiscounterReturns['update_regular_discount(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FanbetDiscounterClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FanbetDiscounter smart contract using the `is_legacy_holder(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async isLegacyHolder(params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']>) {
    const result = await this.appClient.send.call(FanbetDiscounterParamsFactory.isLegacyHolder(params))
    return result.return as unknown as FanbetDiscounterReturns['is_legacy_holder(address)bool']
  }

  /**
   * Methods to access state for the current FanbetDiscounter app
   */
  state = {
    /**
     * Methods to access global state for the current FanbetDiscounter app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          administrator: new BinaryStateValue(result.administrator),
          bootstrapped: result.bootstrapped,
          legacyDiscount: result.legacy_discount,
          registryApp: result.registry_app,
          regularDiscount: result.regular_discount,
        }
      },
      /**
       * Get the current value of the administrator key in global state
       */
      administrator: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("administrator")) as Uint8Array | undefined) },
      /**
       * Get the current value of the bootstrapped key in global state
       */
      bootstrapped: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("bootstrapped")) as bigint | undefined },
      /**
       * Get the current value of the legacy_discount key in global state
       */
      legacyDiscount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("legacy_discount")) as bigint | undefined },
      /**
       * Get the current value of the registry_app key in global state
       */
      registryApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registry_app")) as bigint | undefined },
      /**
       * Get the current value of the regular_discount key in global state
       */
      regularDiscount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("regular_discount")) as bigint | undefined },
    },
  }

  public newGroup(): FanbetDiscounterComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a get_discount(address)uint64 method call against the FanbetDiscounter contract
       */
      getDiscount(params: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDiscount(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_discount(address)uint64', v))
        return this
      },
      /**
       * Add a is_legacy_holder(address)bool method call against the FanbetDiscounter contract
       */
      isLegacyHolder(params: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isLegacyHolder(params)))
        resultMappers.push((v) => client.decodeReturnValue('is_legacy_holder(address)bool', v))
        return this
      },
      /**
       * Add a bootstrap(uint64,uint64,uint64)void method call against the FanbetDiscounter contract
       */
      bootstrap(params: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add_legacy_holders(address[])void method call against the FanbetDiscounter contract
       */
      addLegacyHolders(params: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLegacyHolders(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_admin_account(address)void method call against the FanbetDiscounter contract
       */
      updateAdminAccount(params: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdminAccount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_legacy_discount(uint64)void method call against the FanbetDiscounter contract
       */
      updateLegacyDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLegacyDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_legacy_holder(address,string)void method call against the FanbetDiscounter contract
       */
      updateLegacyHolder(params: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateLegacyHolder(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a update_regular_discount(uint64)void method call against the FanbetDiscounter contract
       */
      updateRegularDiscount(params: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRegularDiscount(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the FanbetDiscounter contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FanbetDiscounterComposer
  }
}
export type FanbetDiscounterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_discount(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['get_discount(address)uint64'] | FanbetDiscounterArgs['tuple']['get_discount(address)uint64']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['get_discount(address)uint64'] | undefined]>

  /**
   * Calls the is_legacy_holder(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isLegacyHolder(params?: CallParams<FanbetDiscounterArgs['obj']['is_legacy_holder(address)bool'] | FanbetDiscounterArgs['tuple']['is_legacy_holder(address)bool']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['is_legacy_holder(address)bool'] | undefined]>

  /**
   * Calls the bootstrap(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<FanbetDiscounterArgs['obj']['bootstrap(uint64,uint64,uint64)void'] | FanbetDiscounterArgs['tuple']['bootstrap(uint64,uint64,uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['bootstrap(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the add_legacy_holders(address[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLegacyHolders(params?: CallParams<FanbetDiscounterArgs['obj']['add_legacy_holders(address[])void'] | FanbetDiscounterArgs['tuple']['add_legacy_holders(address[])void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['add_legacy_holders(address[])void'] | undefined]>

  /**
   * Calls the update_admin_account(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdminAccount(params?: CallParams<FanbetDiscounterArgs['obj']['update_admin_account(address)void'] | FanbetDiscounterArgs['tuple']['update_admin_account(address)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_admin_account(address)void'] | undefined]>

  /**
   * Calls the update_legacy_discount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLegacyDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['update_legacy_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_legacy_discount(uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_legacy_discount(uint64)void'] | undefined]>

  /**
   * Calls the update_legacy_holder(address,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLegacyHolder(params?: CallParams<FanbetDiscounterArgs['obj']['update_legacy_holder(address,string)void'] | FanbetDiscounterArgs['tuple']['update_legacy_holder(address,string)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_legacy_holder(address,string)void'] | undefined]>

  /**
   * Calls the update_regular_discount(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRegularDiscount(params?: CallParams<FanbetDiscounterArgs['obj']['update_regular_discount(uint64)void'] | FanbetDiscounterArgs['tuple']['update_regular_discount(uint64)void']>): FanbetDiscounterComposer<[...TReturns, FanbetDiscounterReturns['update_regular_discount(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FanbetDiscounter smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FanbetDiscounterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FanbetDiscounterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FanbetDiscounterComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FanbetDiscounterComposerResults<TReturns>>
}
export type FanbetDiscounterComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

