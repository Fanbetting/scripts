{
    "hints": {
        "register(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_tickets(pay,pay,uint8[5][])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_tickets()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_winnings()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_commit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reveal_ticket()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_payout()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_manager(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reset_lottery()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,(uint64,uint64,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "allocation_percents": {
                    "name": "Percents",
                    "elements": [
                        [
                            "three_match",
                            "uint64"
                        ],
                        [
                            "four_match",
                            "uint64"
                        ],
                        [
                            "five_match",
                            "uint64"
                        ],
                        [
                            "managers",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "update_admin_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_executor_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_manager_account(uint8,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_beacon_app(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_discount_app(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_reveal_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_submission_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_payout_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_ticket_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_percents((uint64,uint64,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "new_percents": {
                    "name": "Percents",
                    "elements": [
                        [
                            "three_match",
                            "uint64"
                        ],
                        [
                            "four_match",
                            "uint64"
                        ],
                        [
                            "five_match",
                            "uint64"
                        ],
                        [
                            "managers",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "get_registration_cost()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_storage_cost(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_winning_ticket()uint8[5]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 8,
            "num_uints": 12
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "administrator": {
                    "type": "bytes",
                    "key": "administrator"
                },
                "beacon_app": {
                    "type": "uint64",
                    "key": "beacon_app"
                },
                "bootstrapped": {
                    "type": "uint64",
                    "key": "bootstrapped"
                },
                "commitment": {
                    "type": "bytes",
                    "key": "commitment"
                },
                "committed": {
                    "type": "uint64",
                    "key": "committed"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "discount_app": {
                    "type": "uint64",
                    "key": "discount_app"
                },
                "executor": {
                    "type": "bytes",
                    "key": "executor"
                },
                "game_round": {
                    "type": "uint64",
                    "key": "game_round"
                },
                "game_status": {
                    "type": "bytes",
                    "key": "game_status"
                },
                "managers": {
                    "type": "bytes",
                    "key": "managers"
                },
                "payout_duration": {
                    "type": "uint64",
                    "key": "payout_duration"
                },
                "percents": {
                    "type": "bytes",
                    "key": "percents"
                },
                "prize_pool": {
                    "type": "uint64",
                    "key": "prize_pool"
                },
                "reveal": {
                    "type": "bytes",
                    "key": "reveal"
                },
                "reveal_duration": {
                    "type": "uint64",
                    "key": "reveal_duration"
                },
                "revealed": {
                    "type": "uint64",
                    "key": "revealed"
                },
                "submission_duration": {
                    "type": "uint64",
                    "key": "submission_duration"
                },
                "ticket_price": {
                    "type": "uint64",
                    "key": "ticket_price"
                },
                "winners": {
                    "type": "bytes",
                    "key": "winners"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetAlgoLottery",
        "desc": "\n    Represents the Fanbet Lottery smart contract.\n\n    This contract manages the lifecycle of a lottery game, including player registration, ticket purchases,\n    ticket submissions, prize distribution, and administrative updates. It interacts with external applications\n    such as a randomness beacon and a discount app to ensure fairness and flexibility.\n\n    Attributes:\n        administrator (Account): The account with administrative privileges.\n        executor (Account): The account responsible for executing critical operations.\n        managers (Managers): A list of manager accounts.\n        beacon_app (Application): The application ID for the randomness beacon.\n        discount_app (Application): The application ID for the discount app.\n        ticket_price (UInt): The price of a single ticket.\n        prize_pool (UInt): The total prize pool for the current round.\n        game_round (UInt): The current game round number.\n        decimals (UInt): The decimal precision for ticket prices.\n        players (BoxMap[Account, UInt64]): A mapping of player accounts to their application IDs.\n        winners (Winners): The winners and their match counts.\n        percents (Percents): The percentage distribution for prize allocation.\n        commitment (Commitment): The commitment details for the current round.\n        reveal (Reveal): The reveal details for the current round.\n        game_status (String): The current status of the game (e.g., \"Open\", \"Submission\", \"Payout\").\n        bootstrapped (bool): Indicates whether the contract has been bootstrapped.\n        committed (bool): Indicates whether a commitment has been submitted.\n        revealed (bool): Indicates whether the winning ticket has been revealed.\n        reveal_duration (UInt): The duration of the reveal phase.\n        submission_duration (UInt): The duration of the submission phase.\n        payout_duration (UInt): The duration of the payout phase.\n    ",
        "methods": [
            {
                "name": "register",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay_txn",
                        "desc": "Payment transaction for registration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Registers a new player in the lottery."
            },
            {
                "name": "buy_tickets",
                "args": [
                    {
                        "type": "pay",
                        "name": "storage_txn"
                    },
                    {
                        "type": "pay",
                        "name": "purchase_txn"
                    },
                    {
                        "type": "uint8[5][]",
                        "name": "guesses",
                        "desc": "User's ticket guesses."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows users to buy lottery tickets."
            },
            {
                "name": "submit_tickets",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows users to submit their tickets for evaluation."
            },
            {
                "name": "payout_winnings",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows users to claim their winnings."
            },
            {
                "name": "submit_commit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Submits a commitment to the Algorand Randomness Beacon for generating the winning ticket."
            },
            {
                "name": "reveal_ticket",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Reveals the winning ticket based on the commitment."
            },
            {
                "name": "open_payout",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opens the payout phase of the lottery."
            },
            {
                "name": "payout_manager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "index",
                        "desc": "The index of the manager to payout."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Payouts the managers based on their allocation percentage."
            },
            {
                "name": "reset_lottery",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Resets the lottery for the next round."
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price",
                        "desc": "Ticket price."
                    },
                    {
                        "type": "uint64",
                        "name": "decimals",
                        "desc": "Decimal precision for the ticket price."
                    },
                    {
                        "type": "uint64",
                        "name": "beacon_id",
                        "desc": "Application ID for the random beacon."
                    },
                    {
                        "type": "uint64",
                        "name": "discount_id",
                        "desc": "Application ID for the discount app."
                    },
                    {
                        "type": "uint64",
                        "name": "reveal_duration",
                        "desc": "Duration for the reveal phase."
                    },
                    {
                        "type": "uint64",
                        "name": "submissions_duration",
                        "desc": "Duration for the submission phase."
                    },
                    {
                        "type": "uint64",
                        "name": "payout_duration",
                        "desc": "Duration for the payout phase."
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64)",
                        "name": "allocation_percents",
                        "desc": "Percentage distribution for prize allocation."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Bootstraps the lottery contract with initial settings."
            },
            {
                "name": "update_admin_account",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin",
                        "desc": "The new administrator address."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the administrator account."
            },
            {
                "name": "update_executor_account",
                "args": [
                    {
                        "type": "address",
                        "name": "new_executor",
                        "desc": "The new executor address."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the executor account."
            },
            {
                "name": "update_manager_account",
                "args": [
                    {
                        "type": "uint8",
                        "name": "index",
                        "desc": "The index of the manager to update."
                    },
                    {
                        "type": "address",
                        "name": "new_manager",
                        "desc": "The new manager address."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates a manager account."
            },
            {
                "name": "update_beacon_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_beacon_id",
                        "desc": "The new beacon application ID."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the random beacon application ID."
            },
            {
                "name": "update_discount_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_discount_id",
                        "desc": "The new discount application ID."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the discount application ID."
            },
            {
                "name": "update_reveal_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay",
                        "desc": "The new reveal duration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the reveal phase duration."
            },
            {
                "name": "update_submission_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay",
                        "desc": "The new submission duration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the submission phase duration."
            },
            {
                "name": "update_payout_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay",
                        "desc": "The new payout duration."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the payout phase duration."
            },
            {
                "name": "update_ticket_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_price",
                        "desc": "The new ticket price."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the ticket price."
            },
            {
                "name": "update_percents",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64,uint64)",
                        "name": "new_percents",
                        "desc": "The new percentage distribution."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the percentage distribution for prize allocation."
            },
            {
                "name": "get_registration_cost",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The total registration cost."
                },
                "desc": "Returns the registration cost."
            },
            {
                "name": "get_storage_cost",
                "args": [
                    {
                        "type": "uint64",
                        "name": "num_of_tickets",
                        "desc": "The number of tickets."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The cost of storing the number of tickets."
                },
                "desc": "Calculates the storage cost for a given number of tickets."
            },
            {
                "name": "get_winning_ticket",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8[5]",
                    "desc": "The winning ticket for the current round."
                },
                "desc": "Returns the winning ticket."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}