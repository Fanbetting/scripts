{
    "hints": {
        "buy_tickets(pay,axfer,uint8[5][])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_tickets()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_winnings()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_winning_ticket()uint8[5]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bootstrap(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "submit_commit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reveal_ticket()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "open_payout()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "payout_managers()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reset_lottery()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_admin_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_executor_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_manager_account(uint8,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_beacon_app(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_discount_app(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_reveal_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_submission_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_payout_duration(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_ticket_price(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_ticket_token(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_storage_cost(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 13
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "administrator": {
                    "type": "bytes",
                    "key": "administrator"
                },
                "beacon_app": {
                    "type": "uint64",
                    "key": "beacon_app"
                },
                "bootstrapped": {
                    "type": "uint64",
                    "key": "bootstrapped"
                },
                "commitment": {
                    "type": "bytes",
                    "key": "commitment"
                },
                "committed": {
                    "type": "uint64",
                    "key": "committed"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "discount_app": {
                    "type": "uint64",
                    "key": "discount_app"
                },
                "executor": {
                    "type": "bytes",
                    "key": "executor"
                },
                "game_round": {
                    "type": "uint64",
                    "key": "game_round"
                },
                "game_status": {
                    "type": "bytes",
                    "key": "game_status"
                },
                "managers": {
                    "type": "bytes",
                    "key": "managers"
                },
                "payout_duration": {
                    "type": "uint64",
                    "key": "payout_duration"
                },
                "prize_pool": {
                    "type": "uint64",
                    "key": "prize_pool"
                },
                "reveal": {
                    "type": "bytes",
                    "key": "reveal"
                },
                "reveal_duration": {
                    "type": "uint64",
                    "key": "reveal_duration"
                },
                "revealed": {
                    "type": "uint64",
                    "key": "revealed"
                },
                "submission_duration": {
                    "type": "uint64",
                    "key": "submission_duration"
                },
                "ticket_price": {
                    "type": "uint64",
                    "key": "ticket_price"
                },
                "ticket_token": {
                    "type": "uint64",
                    "key": "ticket_token"
                },
                "winners": {
                    "type": "bytes",
                    "key": "winners"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetLottery",
        "methods": [
            {
                "name": "buy_tickets",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay_txn"
                    },
                    {
                        "type": "axfer",
                        "name": "axfer_txn"
                    },
                    {
                        "type": "uint8[5][]",
                        "name": "guesses"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_tickets",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "payout_winnings",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_winning_ticket",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8[5]"
                }
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    },
                    {
                        "type": "uint64",
                        "name": "decimals"
                    },
                    {
                        "type": "uint64",
                        "name": "beacon_id"
                    },
                    {
                        "type": "uint64",
                        "name": "discount_id"
                    },
                    {
                        "type": "uint64",
                        "name": "reveal_duration"
                    },
                    {
                        "type": "uint64",
                        "name": "submissions_duration"
                    },
                    {
                        "type": "uint64",
                        "name": "payout_duration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "submit_commit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal_ticket",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "open_payout",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "payout_managers",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reset_lottery",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_admin_account",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_executor_account",
                "args": [
                    {
                        "type": "address",
                        "name": "new_executor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_manager_account",
                "args": [
                    {
                        "type": "uint8",
                        "name": "index"
                    },
                    {
                        "type": "address",
                        "name": "new_manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_beacon_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_beacon_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_discount_app",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_discount_id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_reveal_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_submission_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_payout_duration",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_delay"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_ticket_price",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_ticket_token",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_token_id"
                    },
                    {
                        "type": "uint64",
                        "name": "new_decimal"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_storage_cost",
                "args": [
                    {
                        "type": "uint64",
                        "name": "num_of_tickets"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}