{
    "hints": {
        "bootstrap(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "store_tickets(uint8[5][],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "reset_player()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_tickets(uint64,uint64,uint64)uint8[5][]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_matches()(uint8,uint8,uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "get_tickets_length(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "lottery": {
                    "type": "bytes",
                    "key": "lottery"
                },
                "matches": {
                    "type": "bytes",
                    "key": "matches"
                },
                "player": {
                    "type": "bytes",
                    "key": "player"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetPlayer",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "address",
                        "name": "player_address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "store_tickets",
                "args": [
                    {
                        "type": "uint8[5][]",
                        "name": "guesses"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "compute_winnings",
                "args": [
                    {
                        "type": "uint8[5]",
                        "name": "winning_ticket"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    },
                    {
                        "type": "uint64",
                        "name": "start"
                    },
                    {
                        "type": "uint64",
                        "name": "stop"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint8,uint8,uint8)"
                }
            },
            {
                "name": "reset_player",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_tickets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "start"
                    },
                    {
                        "type": "uint64",
                        "name": "stop"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint8[5][]"
                }
            },
            {
                "name": "get_matches",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint8,uint8,uint8)"
                }
            },
            {
                "name": "get_tickets_length",
                "args": [
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}