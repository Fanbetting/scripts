{
    "hints": {
        "bootstrap(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "store_tickets(uint8[5][],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "reset_player()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reset_tickets(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reclaim_balance(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_tickets(uint64,uint64,uint64)uint8[5][]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_matches()(uint8,uint8,uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "get_tickets_length(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "lottery": {
                    "type": "bytes",
                    "key": "lottery"
                },
                "matches": {
                    "type": "bytes",
                    "key": "matches"
                },
                "player": {
                    "type": "bytes",
                    "key": "player"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetPlayer",
        "desc": "\n    A smart contract for managing a lottery system where players can store tickets, compute winnings,\n    and manage their balances. This contract is designed to handle multiple game rounds and ensure\n    secure interactions between the lottery and players.\n    ",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "address",
                        "name": "player_address",
                        "desc": "The address of the player."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes the contract with the player's address and sets the lottery address to the transaction sender."
            },
            {
                "name": "store_tickets",
                "args": [
                    {
                        "type": "uint8[5][]",
                        "name": "guesses",
                        "desc": "The tickets to be stored."
                    },
                    {
                        "type": "uint64",
                        "name": "game_round",
                        "desc": "The game round for which the tickets are being stored."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Stores tickets for a specific game round. Ensures the sender is authorized and validates ticket constraints."
            },
            {
                "name": "compute_winnings",
                "args": [
                    {
                        "type": "uint8[5]",
                        "name": "winning_ticket",
                        "desc": "The winning ticket to compare against."
                    },
                    {
                        "type": "uint64",
                        "name": "game_round",
                        "desc": "The game round to compute winnings for."
                    },
                    {
                        "type": "uint64",
                        "name": "start",
                        "desc": "The starting index of tickets to evaluate."
                    },
                    {
                        "type": "uint64",
                        "name": "stop",
                        "desc": "The ending index of tickets to evaluate."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint8,uint8,uint8)",
                    "desc": "A struct containing the count of matches (three, four, and five matches)."
                },
                "desc": "Computes the winnings for a specific game round and range of tickets."
            },
            {
                "name": "reset_player",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Resets the player's match counts to zero."
            },
            {
                "name": "reset_tickets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "game_round",
                        "desc": "The game round to reset tickets for."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Resets the tickets for a specific game round."
            },
            {
                "name": "reclaim_balance",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount to reclaim."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allows the player to reclaim a specified amount of balance."
            },
            {
                "name": "get_tickets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "start",
                        "desc": "The starting index of tickets to retrieve."
                    },
                    {
                        "type": "uint64",
                        "name": "stop",
                        "desc": "The ending index of tickets to retrieve."
                    },
                    {
                        "type": "uint64",
                        "name": "game_round",
                        "desc": "The game round to retrieve tickets for."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint8[5][]",
                    "desc": "The requested range of tickets."
                },
                "desc": "Retrieves a range of tickets for a specific game round."
            },
            {
                "name": "get_matches",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint8,uint8,uint8)",
                    "desc": "A struct containing the current match counts (three, four, and five matches)."
                },
                "desc": "Retrieves the current match counts for the player."
            },
            {
                "name": "get_tickets_length",
                "args": [
                    {
                        "type": "uint64",
                        "name": "game_round",
                        "desc": "The game round to retrieve the ticket count for."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "The number of tickets for the specified game round."
                },
                "desc": "Retrieves the number of tickets stored for a specific game round."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}