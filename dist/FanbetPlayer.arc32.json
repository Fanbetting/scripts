{
    "hints": {
        "bootstrap(address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "store_tickets(uint8[5][],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "compute_winnings(uint8[5],uint64,uint64,uint64)(uint8,uint8,uint8)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "reset_player()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_tickets(uint64,uint64,uint64)uint8[5][]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_matches()(uint8,uint8,uint8)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Matches",
                    "elements": [
                        [
                            "three_match",
                            "uint8"
                        ],
                        [
                            "four_match",
                            "uint8"
                        ],
                        [
                            "five_match",
                            "uint8"
                        ]
                    ]
                }
            }
        },
        "get_tickets_length(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X3BsYXllci5jb250cmFjdC5GYW5iZXRQbGF5ZXIuX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDUgMgogICAgYnl0ZWNibG9jayAibWF0Y2hlcyIgMHgxNTFmN2M3NSAibG90dGVyeSIgInRfIiAweDAwIDB4MDAwMDAwIDB4MDAwMCAweDA2ODEwMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYubWF0Y2hlcyA9IE1hdGNoZXMoCiAgICBieXRlY18wIC8vICJtYXRjaGVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MjctMzEKICAgIC8vIHNlbGYubWF0Y2hlcyA9IE1hdGNoZXMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDgoMCksCiAgICAvLyAgICAgZm91cl9tYXRjaD1VSW50OCgwKSwKICAgIC8vICAgICBmaXZlX21hdGNoPVVJbnQ4KDApLAogICAgLy8gKQogICAgYnl0ZWMgNSAvLyAweDAwMDAwMAogICAgYXBwX2dsb2JhbF9wdXQKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEZhbmJldFBsYXllcihBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMgogICAgcHVzaGJ5dGVzcyAweGYzZjE0ZWEzIDB4ZTZiMWRkN2EgMHg3ODY2YWM3MCAweDg3MzEyMTEzIDB4N2ZhNjc1ZGMgMHhiZjFkMWRmNSAweDUxZjMwMGE3IC8vIG1ldGhvZCAiYm9vdHN0cmFwKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAic3RvcmVfdGlja2V0cyh1aW50OFs1XVtdLHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJjb21wdXRlX3dpbm5pbmdzKHVpbnQ4WzVdLHVpbnQ2NCx1aW50NjQsdWludDY0KSh1aW50OCx1aW50OCx1aW50OCkiLCBtZXRob2QgInJlc2V0X3BsYXllcigpdm9pZCIsIG1ldGhvZCAiZ2V0X3RpY2tldHModWludDY0LHVpbnQ2NCx1aW50NjQpdWludDhbNV1bXSIsIG1ldGhvZCAiZ2V0X21hdGNoZXMoKSh1aW50OCx1aW50OCx1aW50OCkiLCBtZXRob2QgImdldF90aWNrZXRzX2xlbmd0aCh1aW50NjQpdWludDY0IgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9ib290c3RyYXBfcm91dGVANSBtYWluX3N0b3JlX3RpY2tldHNfcm91dGVANiBtYWluX2NvbXB1dGVfd2lubmluZ3Nfcm91dGVANyBtYWluX3Jlc2V0X3BsYXllcl9yb3V0ZUA4IG1haW5fZ2V0X3RpY2tldHNfcm91dGVAOSBtYWluX2dldF9tYXRjaGVzX3JvdXRlQDEwIG1haW5fZ2V0X3RpY2tldHNfbGVuZ3RoX3JvdXRlQDExCgptYWluX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgRmFuYmV0UGxheWVyKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldF90aWNrZXRzX2xlbmd0aF9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjEyMwogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgRmFuYmV0UGxheWVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMjMKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X3RpY2tldHNfbGVuZ3RoCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9tYXRjaGVzX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTE5CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ2V0X21hdGNoZXMKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0X3RpY2tldHNfcm91dGVAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjEwNgogICAgLy8gQGFiaW1ldGhvZChyZWFkb25seT1UcnVlKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgRmFuYmV0UGxheWVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMDYKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIGNhbGxzdWIgZ2V0X3RpY2tldHMKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVzZXRfcGxheWVyX3JvdXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo5NAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmVzZXRfcGxheWVyCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NvbXB1dGVfd2lubmluZ3Nfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjU5CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEZhbmJldFBsYXllcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NTkKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBjb21wdXRlX3dpbm5pbmdzCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3N0b3JlX3RpY2tldHNfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjQyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTkKICAgIC8vIGNsYXNzIEZhbmJldFBsYXllcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NDIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBzdG9yZV90aWNrZXRzCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Jvb3RzdHJhcF9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MzMKICAgIC8vIEBhYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxOQogICAgLy8gY2xhc3MgRmFuYmV0UGxheWVyKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTozMwogICAgLy8gQGFiaW1ldGhvZChjcmVhdGU9InJlcXVpcmUiKQogICAgY2FsbHN1YiBib290c3RyYXAKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X3BsYXllci5jb250cmFjdC5GYW5iZXRQbGF5ZXIuYm9vdHN0cmFwKHBsYXllcl9hZGRyZXNzOiBieXRlcykgLT4gdm9pZDoKYm9vdHN0cmFwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MzMtMzQKICAgIC8vIEBhYmltZXRob2QoY3JlYXRlPSJyZXF1aXJlIikKICAgIC8vIGRlZiBib290c3RyYXAoc2VsZiwgcGxheWVyX2FkZHJlc3M6IEFkZHJlc3MpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjM1CiAgICAvLyBzZWxmLnBsYXllciA9IHBsYXllcl9hZGRyZXNzLm5hdGl2ZQogICAgcHVzaGJ5dGVzICJwbGF5ZXIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTozNgogICAgLy8gc2VsZi5sb3R0ZXJ5ID0gVHhuLnNlbmRlcgogICAgYnl0ZWNfMiAvLyAibG90dGVyeSIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X3BsYXllci5jb250cmFjdC5GYW5iZXRQbGF5ZXIuc3RvcmVfdGlja2V0cyhndWVzc2VzOiBieXRlcywgZ2FtZV9yb3VuZDogYnl0ZXMpIC0+IHZvaWQ6CnN0b3JlX3RpY2tldHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo0Mi00MwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgc3RvcmVfdGlja2V0cyhzZWxmLCBndWVzc2VzOiBEeW5hbWljQXJyYXlbVGlja2V0XSwgZ2FtZV9yb3VuZDogVUludDY0KSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NDQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYubG90dGVyeSwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImxvdHRlcnkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubG90dGVyeSBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NDYKICAgIC8vIGlmIGdhbWVfcm91bmQgbm90IGluIHNlbGYudGlja2V0czoKICAgIGJ5dGVjXzMgLy8gInRfIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogc3RvcmVfdGlja2V0c19hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLnRpY2tldHNbZ2FtZV9yb3VuZF0gPSBEeW5hbWljQXJyYXlbVGlja2V0XSgpCiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJ5dGVjIDYgLy8gMHgwMDAwCiAgICBib3hfcHV0CgpzdG9yZV90aWNrZXRzX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBhc3NlcnQgc2VsZi50aWNrZXRzW2dhbWVfcm91bmRdLmxlbmd0aCArIGd1ZXNzZXMubGVuZ3RoIDw9IGNmZy5NQVhfVElDS0VUUywgZXJyLklOVkFMSURfVElDS0VUU19TSVpFCiAgICBmcmFtZV9kaWcgNQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0cyBlbnRyeSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGR1cAogICAgZnJhbWVfYnVyeSA0CiAgICArCiAgICBwdXNoaW50IDgwMCAvLyA4MDAKICAgIDw9CiAgICBhc3NlcnQgLy8gTWF4aW11bSByZWFjaGVkIGZvciB0aWNrZXRzLiBNYXhpbXVtOiA4MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoZ3Vlc3Nlcy5sZW5ndGgpOgogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMgoKc3RvcmVfdGlja2V0c19mb3JfaGVhZGVyQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo1MQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKGd1ZXNzZXMubGVuZ3RoKToKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgNAogICAgPAogICAgYnogc3RvcmVfdGlja2V0c19hZnRlcl9mb3JAMTQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjUyCiAgICAvLyBndWVzcyA9IGd1ZXNzZXNbaV0uY29weSgpCiAgICBmcmFtZV9kaWcgLTIKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18yIC8vIDUKICAgICoKICAgIGludGNfMiAvLyA1CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NTQKICAgIC8vIGZvciBqIGluIHVyYW5nZShndWVzcy5sZW5ndGgpOgogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMwoKc3RvcmVfdGlja2V0c19mb3JfaGVhZGVyQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo1NAogICAgLy8gZm9yIGogaW4gdXJhbmdlKGd1ZXNzLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgMwogICAgaW50Y18yIC8vIDUKICAgIDwKICAgIGJ6IHN0b3JlX3RpY2tldHNfYWZ0ZXJfZm9yQDEyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo1NQogICAgLy8gYXNzZXJ0IGd1ZXNzW2pdID4gMCBhbmQgZ3Vlc3Nbal0gPD0gY2ZnLkRJR0lUX0JPVU5ELCBlcnIuSU5WQUxJRF9ESUdJVAogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgYnl0ZWMgNCAvLyAweDAwCiAgICBiPgogICAgYnogc3RvcmVfdGlja2V0c19ib29sX2ZhbHNlQDkKICAgIGZyYW1lX2RpZyAxCiAgICBwdXNoYnl0ZXMgMHgyMAogICAgYjw9CiAgICBieiBzdG9yZV90aWNrZXRzX2Jvb2xfZmFsc2VAOQogICAgaW50Y18xIC8vIDEKCnN0b3JlX3RpY2tldHNfYm9vbF9tZXJnZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjU1CiAgICAvLyBhc3NlcnQgZ3Vlc3Nbal0gPiAwIGFuZCBndWVzc1tqXSA8PSBjZmcuRElHSVRfQk9VTkQsIGVyci5JTlZBTElEX0RJR0lUCiAgICBhc3NlcnQgLy8gVGlja2V0IGRpZ2l0IGNhbiBub3QgZXhjZWVkIDMyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo1NAogICAgLy8gZm9yIGogaW4gdXJhbmdlKGd1ZXNzLmxlbmd0aCk6CiAgICBmcmFtZV9kaWcgMwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBzdG9yZV90aWNrZXRzX2Zvcl9oZWFkZXJANQoKc3RvcmVfdGlja2V0c19ib29sX2ZhbHNlQDk6CiAgICBpbnRjXzAgLy8gMAogICAgYiBzdG9yZV90aWNrZXRzX2Jvb2xfbWVyZ2VAMTAKCnN0b3JlX3RpY2tldHNfYWZ0ZXJfZm9yQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NTcKICAgIC8vIHNlbGYudGlja2V0c1tnYW1lX3JvdW5kXS5hcHBlbmQoZ3Vlc3MuY29weSgpKQogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0cyBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDUKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UoZ3Vlc3Nlcy5sZW5ndGgpOgogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGIgc3RvcmVfdGlja2V0c19mb3JfaGVhZGVyQDMKCnN0b3JlX3RpY2tldHNfYWZ0ZXJfZm9yQDE0OgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9wbGF5ZXIuY29udHJhY3QuRmFuYmV0UGxheWVyLmNvbXB1dGVfd2lubmluZ3Mod2lubmluZ190aWNrZXQ6IGJ5dGVzLCBnYW1lX3JvdW5kOiBieXRlcywgc3RhcnQ6IGJ5dGVzLCBzdG9wOiBieXRlcykgLT4gYnl0ZXM6CmNvbXB1dGVfd2lubmluZ3M6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo1OS02MAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgY29tcHV0ZV93aW5uaW5ncyhzZWxmLCB3aW5uaW5nX3RpY2tldDogVGlja2V0LCBnYW1lX3JvdW5kOiBVSW50NjQsIHN0YXJ0OiBVSW50NjQsIHN0b3A6IFVJbnQ2NCkgLT4gTWF0Y2hlczoKICAgIHByb3RvIDQgMQogICAgaW50Y18wIC8vIDAKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo2MQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5sb3R0ZXJ5LCBlcnIuVU5BVVRIT1JJWkVECiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMiAvLyAibG90dGVyeSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5sb3R0ZXJ5IGV4aXN0cwogICAgPT0KICAgIGFzc2VydCAvLyBBY2NvdW50IGlzIG5vdCB1bmF1dGhvcml6ZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo2MgogICAgLy8gYXNzZXJ0IHN0YXJ0Lm5hdGl2ZSA8IHN0b3AubmF0aXZlLCBlcnIuSU5WQUxJRF9JTkRFWEVTCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIDwKICAgIGFzc2VydCAvLyBTdG9wIGluZGV4IG11c3QgYmUgZ3JlYXRlciB0aGFuIHN0YXJ0IGluZGV4CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo2NC02OAogICAgLy8gbSA9IE1hdGNoZXMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDgoMCksCiAgICAvLyAgICAgZm91cl9tYXRjaD1VSW50OCgwKSwKICAgIC8vICAgICBmaXZlX21hdGNoPVVJbnQ4KDApLAogICAgLy8gKQogICAgYnl0ZWMgNSAvLyAweDAwMDAwMAoKY29tcHV0ZV93aW5uaW5nc19mb3JfaGVhZGVyQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3MAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHN0YXJ0Lm5hdGl2ZSwgc3RvcC5uYXRpdmUpOgogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2RpZyA1CiAgICA8CiAgICBieiBjb21wdXRlX3dpbm5pbmdzX2FmdGVyX2ZvckAxOAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6NzEKICAgIC8vIG1hdGNoZXMgPSBVSW50KDApCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3MwogICAgLy8gZm9yIGogaW4gdXJhbmdlKDUpOgogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMQoKY29tcHV0ZV93aW5uaW5nc19mb3JfaGVhZGVyQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3MwogICAgLy8gZm9yIGogaW4gdXJhbmdlKDUpOgogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMiAvLyA1CiAgICA8CiAgICBieiBjb21wdXRlX3dpbm5pbmdzX2FmdGVyX2ZvckA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3NAogICAgLy8gaWYgc2VsZi50aWNrZXRzW2dhbWVfcm91bmRdW2ldW2pdID09IHdpbm5pbmdfdGlja2V0W2pdOgogICAgYnl0ZWNfMyAvLyAidF8iCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0cyBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgNAogICAgaW50Y18yIC8vIDUKICAgICoKICAgIGludGNfMiAvLyA1CiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludGNfMSAvLyAxCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2RpZyAtNAogICAgdW5jb3ZlciAyCiAgICBpbnRjXzEgLy8gMQogICAgZXh0cmFjdDMgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBiPT0KICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9idXJ5IDMKICAgIGJ6IGNvbXB1dGVfd2lubmluZ3NfYWZ0ZXJfaWZfZWxzZUA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3NQogICAgLy8gbWF0Y2hlcyArPSBVSW50KDEpCiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwoKY29tcHV0ZV93aW5uaW5nc19hZnRlcl9pZl9lbHNlQDY6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3MwogICAgLy8gZm9yIGogaW4gdXJhbmdlKDUpOgogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgY29tcHV0ZV93aW5uaW5nc19mb3JfaGVhZGVyQDMKCmNvbXB1dGVfd2lubmluZ3NfYWZ0ZXJfZm9yQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3NwogICAgLy8gaWYgbWF0Y2hlcyA9PSBVSW50KDMpOgogICAgZnJhbWVfZGlnIDIKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYnogY29tcHV0ZV93aW5uaW5nc19lbHNlX2JvZHlAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5Ojc4CiAgICAvLyBtLnRocmVlX21hdGNoID0gVUludDgobS50aHJlZV9tYXRjaC5uYXRpdmUgKyBVSW50KDEpKQogICAgZnJhbWVfZGlnIDYKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGdldGJ5dGUKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgcmVwbGFjZTIgMAogICAgZnJhbWVfYnVyeSA2Cgpjb21wdXRlX3dpbm5pbmdzX2FmdGVyX2lmX2Vsc2VAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo3MAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHN0YXJ0Lm5hdGl2ZSwgc3RvcC5uYXRpdmUpOgogICAgZnJhbWVfZGlnIDQKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDQKICAgIGIgY29tcHV0ZV93aW5uaW5nc19mb3JfaGVhZGVyQDEKCmNvbXB1dGVfd2lubmluZ3NfZWxzZV9ib2R5QDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6ODAKICAgIC8vIGVsaWYgbWF0Y2hlcyA9PSBVSW50KDQpOgogICAgZnJhbWVfZGlnIDIKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYnogY29tcHV0ZV93aW5uaW5nc19lbHNlX2JvZHlAMTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjgxCiAgICAvLyBtLmZvdXJfbWF0Y2ggPSBVSW50OChtLmZvdXJfbWF0Y2gubmF0aXZlICsgVUludCgxKSkKICAgIGZyYW1lX2RpZyA2CiAgICBkdXAKICAgIGludGNfMSAvLyAxCiAgICBnZXRieXRlCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA3IDEKICAgIHJlcGxhY2UyIDEKICAgIGZyYW1lX2J1cnkgNgogICAgYiBjb21wdXRlX3dpbm5pbmdzX2FmdGVyX2lmX2Vsc2VAMTYKCmNvbXB1dGVfd2lubmluZ3NfZWxzZV9ib2R5QDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6ODMKICAgIC8vIGVsaWYgbWF0Y2hlcyA9PSBVSW50KDUpOgogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMiAvLyA1CiAgICA9PQogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2J1cnkgMAogICAgYnogY29tcHV0ZV93aW5uaW5nc19hZnRlcl9pZl9lbHNlQDE0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo4NAogICAgLy8gbS5maXZlX21hdGNoID0gVUludDgobS5maXZlX21hdGNoLm5hdGl2ZSArIFVJbnQoMSkpCiAgICBmcmFtZV9kaWcgNgogICAgZHVwCiAgICBpbnRjXzMgLy8gMgogICAgZ2V0Ynl0ZQogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNyAxCiAgICByZXBsYWNlMiAyCiAgICBmcmFtZV9idXJ5IDAKCmNvbXB1dGVfd2lubmluZ3NfYWZ0ZXJfaWZfZWxzZUAxNDoKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9idXJ5IDYKICAgIGIgY29tcHV0ZV93aW5uaW5nc19hZnRlcl9pZl9lbHNlQDE2Cgpjb21wdXRlX3dpbm5pbmdzX2FmdGVyX2ZvckAxODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyB0aHJlZV9tYXRjaD1VSW50OChzZWxmLm1hdGNoZXMudGhyZWVfbWF0Y2gubmF0aXZlICsgbS50aHJlZV9tYXRjaC5uYXRpdmUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm1hdGNoZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0Y2hlcyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBnZXRieXRlCiAgICBmcmFtZV9kaWcgNgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Ynl0ZQogICAgKwogICAgaXRvYgogICAgZXh0cmFjdCA3IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5Ojg4CiAgICAvLyBmb3VyX21hdGNoPVVJbnQ4KHNlbGYubWF0Y2hlcy5mb3VyX21hdGNoLm5hdGl2ZSArIG0uZm91cl9tYXRjaC5uYXRpdmUpLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm1hdGNoZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0Y2hlcyBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICBnZXRieXRlCiAgICBkaWcgMgogICAgaW50Y18xIC8vIDEKICAgIGdldGJ5dGUKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weTo4OQogICAgLy8gZml2ZV9tYXRjaD1VSW50OChzZWxmLm1hdGNoZXMuZml2ZV9tYXRjaC5uYXRpdmUgKyBtLmZpdmVfbWF0Y2gubmF0aXZlKSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJtYXRjaGVzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm1hdGNoZXMgZXhpc3RzCiAgICBpbnRjXzMgLy8gMgogICAgZ2V0Ynl0ZQogICAgZGlnIDMKICAgIGludGNfMyAvLyAyCiAgICBnZXRieXRlCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6ODYtOTAKICAgIC8vIHNlbGYubWF0Y2hlcyA9IE1hdGNoZXMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDgoc2VsZi5tYXRjaGVzLnRocmVlX21hdGNoLm5hdGl2ZSArIG0udGhyZWVfbWF0Y2gubmF0aXZlKSwKICAgIC8vICAgICBmb3VyX21hdGNoPVVJbnQ4KHNlbGYubWF0Y2hlcy5mb3VyX21hdGNoLm5hdGl2ZSArIG0uZm91cl9tYXRjaC5uYXRpdmUpLAogICAgLy8gICAgIGZpdmVfbWF0Y2g9VUludDgoc2VsZi5tYXRjaGVzLmZpdmVfbWF0Y2gubmF0aXZlICsgbS5maXZlX21hdGNoLm5hdGl2ZSksCiAgICAvLyApCiAgICBjb3ZlciAyCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6ODYKICAgIC8vIHNlbGYubWF0Y2hlcyA9IE1hdGNoZXMoCiAgICBieXRlY18wIC8vICJtYXRjaGVzIgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6ODYtOTAKICAgIC8vIHNlbGYubWF0Y2hlcyA9IE1hdGNoZXMoCiAgICAvLyAgICAgdGhyZWVfbWF0Y2g9VUludDgoc2VsZi5tYXRjaGVzLnRocmVlX21hdGNoLm5hdGl2ZSArIG0udGhyZWVfbWF0Y2gubmF0aXZlKSwKICAgIC8vICAgICBmb3VyX21hdGNoPVVJbnQ4KHNlbGYubWF0Y2hlcy5mb3VyX21hdGNoLm5hdGl2ZSArIG0uZm91cl9tYXRjaC5uYXRpdmUpLAogICAgLy8gICAgIGZpdmVfbWF0Y2g9VUludDgoc2VsZi5tYXRjaGVzLmZpdmVfbWF0Y2gubmF0aXZlICsgbS5maXZlX21hdGNoLm5hdGl2ZSksCiAgICAvLyApCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6OTIKICAgIC8vIHJldHVybiBtLmNvcHkoKQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X3BsYXllci5jb250cmFjdC5GYW5iZXRQbGF5ZXIucmVzZXRfcGxheWVyKCkgLT4gdm9pZDoKcmVzZXRfcGxheWVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6OTYKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYubG90dGVyeSwgZXJyLlVOQVVUSE9SSVpFRAogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImxvdHRlcnkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubG90dGVyeSBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gQWNjb3VudCBpcyBub3QgdW5hdXRob3JpemVkIHRvIGNhbGwgdGhpcyBmdW5jdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6OTgKICAgIC8vIHNlbGYubWF0Y2hlcy50aHJlZV9tYXRjaCA9IFVJbnQ4KDApCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAibWF0Y2hlcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYXRjaGVzIGV4aXN0cwogICAgYnl0ZWMgNCAvLyAweDAwCiAgICByZXBsYWNlMiAwCiAgICBieXRlY18wIC8vICJtYXRjaGVzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5Ojk5CiAgICAvLyBzZWxmLm1hdGNoZXMuZm91cl9tYXRjaCA9IFVJbnQ4KDApCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAibWF0Y2hlcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYXRjaGVzIGV4aXN0cwogICAgYnl0ZWMgNCAvLyAweDAwCiAgICByZXBsYWNlMiAxCiAgICBieXRlY18wIC8vICJtYXRjaGVzIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjEwMAogICAgLy8gc2VsZi5tYXRjaGVzLmZpdmVfbWF0Y2ggPSBVSW50OCgwKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm1hdGNoZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0Y2hlcyBleGlzdHMKICAgIGJ5dGVjIDQgLy8gMHgwMAogICAgcmVwbGFjZTIgMgogICAgYnl0ZWNfMCAvLyAibWF0Y2hlcyIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZmFuYmV0X3BsYXllci5jb250cmFjdC5GYW5iZXRQbGF5ZXIuZ2V0X3RpY2tldHMoc3RhcnQ6IGJ5dGVzLCBzdG9wOiBieXRlcywgZ2FtZV9yb3VuZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfdGlja2V0czoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjEwNi0xMDcKICAgIC8vIEBhYmltZXRob2QocmVhZG9ubHk9VHJ1ZSkKICAgIC8vIGRlZiBnZXRfdGlja2V0cyhzZWxmLCBzdGFydDogVUludDY0LCBzdG9wOiBVSW50NjQsIGdhbWVfcm91bmQ6IFVJbnQ2NCkgLT4gRHluYW1pY0FycmF5W1RpY2tldF06CiAgICBwcm90byAzIDEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMDgKICAgIC8vIGFzc2VydCBzdGFydC5uYXRpdmUgPCBzdG9wLm5hdGl2ZSwgZXJyLklOVkFMSURfSU5ERVhFUwogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBkdXAyCiAgICA8CiAgICBhc3NlcnQgLy8gU3RvcCBpbmRleCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzdGFydCBpbmRleAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTA5CiAgICAvLyBhc3NlcnQgc3RvcC5uYXRpdmUgPD0gc2VsZi50aWNrZXRzW2dhbWVfcm91bmRdLmxlbmd0aCwgZXJyLklOVkFMSURfSU5ERVhFUwogICAgYnl0ZWNfMyAvLyAidF8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICBjb3ZlciAzCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRzIGVudHJ5IGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBkaWcgMQogICAgPj0KICAgIGFzc2VydCAvLyBTdG9wIGluZGV4IG11c3QgYmUgZ3JlYXRlciB0aGFuIHN0YXJ0IGluZGV4CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMTAKICAgIC8vIGFzc2VydCBzdG9wLm5hdGl2ZSAtIHN0YXJ0Lm5hdGl2ZSA8PSBjZmcuTUFYX1BBR0lOQVRJT04sIGVyci5JTlZBTElEX1BBR0VfU0laRQogICAgc3dhcAogICAgLQogICAgcHVzaGludCAxMDAgLy8gMTAwCiAgICA8PQogICAgYXNzZXJ0IC8vIEludmFsaWQgcXVlcnkgc2l6ZSBmb3IgdGlja2V0cy4gTWF4aW11bTogMTAwCgpnZXRfdGlja2V0c193aGlsZV90b3BANjoKICAgIHB1c2hpbnQgMzAxMCAvLyAzMDEwCiAgICBnbG9iYWwgT3Bjb2RlQnVkZ2V0CiAgICA+CiAgICBieiBnZXRfdGlja2V0c19hZnRlcl93aGlsZUAxMQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMiAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjIDcgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlYyA3IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBiIGdldF90aWNrZXRzX3doaWxlX3RvcEA2CgpnZXRfdGlja2V0c19hZnRlcl93aGlsZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjExMwogICAgLy8gdGlja2V0cyA9IER5bmFtaWNBcnJheVtUaWNrZXRdKCkKICAgIGJ5dGVjIDYgLy8gMHgwMDAwCiAgICBmcmFtZV9idXJ5IDAKCmdldF90aWNrZXRzX2Zvcl9oZWFkZXJAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9mYW5iZXRfcGxheWVyL2NvbnRyYWN0LnB5OjExNAogICAgLy8gZm9yIGkgaW4gdXJhbmdlKHN0YXJ0Lm5hdGl2ZSwgc3RvcC5uYXRpdmUpOgogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyCiAgICA8CiAgICBieiBnZXRfdGlja2V0c19hZnRlcl9mb3JANAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTE1CiAgICAvLyB0aWNrZXRzLmFwcGVuZChzZWxmLnRpY2tldHNbZ2FtZV9yb3VuZF1baV0uY29weSgpKQogICAgZnJhbWVfZGlnIDAKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMwogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlja2V0cyBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMiAwCiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBjb3ZlciAzCiAgICBpbnRjXzIgLy8gNQogICAgKgogICAgaW50Y18yIC8vIDUKICAgIGV4dHJhY3QzIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDUKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTE0CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uoc3RhcnQubmF0aXZlLCBzdG9wLm5hdGl2ZSk6CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxCiAgICBiIGdldF90aWNrZXRzX2Zvcl9oZWFkZXJAMQoKZ2V0X3RpY2tldHNfYWZ0ZXJfZm9yQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMTcKICAgIC8vIHJldHVybiB0aWNrZXRzLmNvcHkoKQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmZhbmJldF9wbGF5ZXIuY29udHJhY3QuRmFuYmV0UGxheWVyLmdldF9tYXRjaGVzKCkgLT4gYnl0ZXM6CmdldF9tYXRjaGVzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTIxCiAgICAvLyByZXR1cm4gc2VsZi5tYXRjaGVzLmNvcHkoKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm1hdGNoZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYubWF0Y2hlcyBleGlzdHMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5mYW5iZXRfcGxheWVyLmNvbnRyYWN0LkZhbmJldFBsYXllci5nZXRfdGlja2V0c19sZW5ndGgoZ2FtZV9yb3VuZDogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRfdGlja2V0c19sZW5ndGg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMjMtMTI0CiAgICAvLyBAYWJpbWV0aG9kKHJlYWRvbmx5PVRydWUpCiAgICAvLyBkZWYgZ2V0X3RpY2tldHNfbGVuZ3RoKHNlbGYsIGdhbWVfcm91bmQ6IFVJbnQ2NCkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMjUKICAgIC8vIGlmIGdhbWVfcm91bmQgbm90IGluIHNlbGYudGlja2V0czoKICAgIGJ5dGVjXzMgLy8gInRfIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogZ2V0X3RpY2tldHNfbGVuZ3RoX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2ZhbmJldF9wbGF5ZXIvY29udHJhY3QucHk6MTI2CiAgICAvLyByZXR1cm4gVUludDY0KDApCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBzd2FwCiAgICByZXRzdWIKCmdldF90aWNrZXRzX2xlbmd0aF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZmFuYmV0X3BsYXllci9jb250cmFjdC5weToxMjgKICAgIC8vIHJldHVybiBVSW50NjQoc2VsZi50aWNrZXRzW2dhbWVfcm91bmRdLmxlbmd0aCkKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aWNrZXRzIGVudHJ5IGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDE2CiAgICBpdG9iCiAgICBzd2FwCiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "lottery": {
                    "type": "bytes",
                    "key": "lottery"
                },
                "matches": {
                    "type": "bytes",
                    "key": "matches"
                },
                "player": {
                    "type": "bytes",
                    "key": "player"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetPlayer",
        "methods": [
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "address",
                        "name": "player_address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "store_tickets",
                "args": [
                    {
                        "type": "uint8[5][]",
                        "name": "guesses"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "compute_winnings",
                "args": [
                    {
                        "type": "uint8[5]",
                        "name": "winning_ticket"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    },
                    {
                        "type": "uint64",
                        "name": "start"
                    },
                    {
                        "type": "uint64",
                        "name": "stop"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint8,uint8,uint8)"
                }
            },
            {
                "name": "reset_player",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_tickets",
                "args": [
                    {
                        "type": "uint64",
                        "name": "start"
                    },
                    {
                        "type": "uint64",
                        "name": "stop"
                    },
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint8[5][]"
                }
            },
            {
                "name": "get_matches",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "(uint8,uint8,uint8)"
                }
            },
            {
                "name": "get_tickets_length",
                "args": [
                    {
                        "type": "uint64",
                        "name": "game_round"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}