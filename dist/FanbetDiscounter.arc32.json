{
    "hints": {
        "get_discount(address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "is_legacy_holder(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bootstrap(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_legacy_holders(address[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_admin_account(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_legacy_discount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_legacy_holder(address,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_regular_discount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "administrator": {
                    "type": "bytes",
                    "key": "administrator"
                },
                "bootstrapped": {
                    "type": "uint64",
                    "key": "bootstrapped"
                },
                "legacy_discount": {
                    "type": "uint64",
                    "key": "legacy_discount"
                },
                "registry_app": {
                    "type": "uint64",
                    "key": "registry_app"
                },
                "regular_discount": {
                    "type": "uint64",
                    "key": "regular_discount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FanbetDiscounter",
        "desc": "\n    A smart contract for managing discounts for Fanbet users. It supports legacy holders\n    and regular users, allowing administrators to configure discounts and manage legacy holders.\n    ",
        "methods": [
            {
                "name": "get_discount",
                "args": [
                    {
                        "type": "address",
                        "name": "holder",
                        "desc": "The address of the holder."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The discount value. Returns the legacy discount if the holder is a legacy holder, the regular discount if the holder owns an NFD with the Fanbet domain, or 0 otherwise."
                },
                "desc": "Retrieves the discount for a given holder."
            },
            {
                "name": "is_legacy_holder",
                "args": [
                    {
                        "type": "address",
                        "name": "holder",
                        "desc": "The address of the holder."
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool",
                    "desc": "True if the holder is a legacy holder, False otherwise."
                },
                "desc": "Checks if a given holder is a legacy holder."
            },
            {
                "name": "bootstrap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "legacy_discount",
                        "desc": "The discount value for legacy holders."
                    },
                    {
                        "type": "uint64",
                        "name": "regular_discount",
                        "desc": "The discount value for regular holders."
                    },
                    {
                        "type": "uint64",
                        "name": "registry_id",
                        "desc": "The application ID of the registry."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Bootstraps the contract with initial configuration values."
            },
            {
                "name": "add_legacy_holders",
                "args": [
                    {
                        "type": "address[]",
                        "name": "holders",
                        "desc": "A list of addresses to be added as legacy holders."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Adds a list of legacy holders to the contract."
            },
            {
                "name": "update_admin_account",
                "args": [
                    {
                        "type": "address",
                        "name": "new_admin",
                        "desc": "The address of the new administrator."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the administrator account."
            },
            {
                "name": "update_legacy_discount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_discount",
                        "desc": "The new legacy discount value."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the legacy discount value."
            },
            {
                "name": "update_legacy_holder",
                "args": [
                    {
                        "type": "address",
                        "name": "holder",
                        "desc": "The address of the legacy holder."
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The new name to associate with the holder."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the name associated with a legacy holder."
            },
            {
                "name": "update_regular_discount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "new_discount",
                        "desc": "The new regular discount value."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the regular discount value."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}